Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    GT
    LT
    TRANSPOSE
    UNARY_MINUS

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> if_else_statement
Rule 6     statement -> while_statement
Rule 7     statement -> for_statement
Rule 8     statement -> print_statement
Rule 9     statement -> break_statement
Rule 10    statement -> continue_statement
Rule 11    statement -> return_statement
Rule 12    statement -> curly_brackets_statement
Rule 13    assignment -> variable assignment_op arithmetic_expression ;
Rule 14    assignment -> ref_var assignment_op arithmetic_expression ;
Rule 15    assignment_op -> =
Rule 16    assignment_op -> ADDASSIGN
Rule 17    assignment_op -> SUBASSIGN
Rule 18    assignment_op -> MULASSIGN
Rule 19    assignment_op -> DIVASSIGN
Rule 20    if_else_statement -> IF ( relational_expression ) statement
Rule 21    if_else_statement -> IF ( relational_expression ) statement ELSE statement
Rule 22    if_else_statement -> IF ( error ) statement
Rule 23    if_else_statement -> IF ( error ) statement ELSE statement
Rule 24    while_statement -> WHILE ( relational_expression ) statement
Rule 25    while_statement -> WHILE ( error ) statement
Rule 26    for_statement -> FOR variable = range_expression statement
Rule 27    range_expression -> arithmetic_expression : arithmetic_expression
Rule 28    print_statement -> PRINT expr_list ;
Rule 29    print_statement -> PRINT error ;
Rule 30    break_statement -> BREAK ;
Rule 31    return_statement -> RETURN arithmetic_expression ;
Rule 32    continue_statement -> CONTINUE ;
Rule 33    curly_brackets_statement -> { statements }
Rule 34    const -> STRING
Rule 35    const -> FLOATNUM
Rule 36    const -> INTNUM
Rule 37    matrix -> variable
Rule 38    matrix -> minus_matrix
Rule 39    matrix -> matrix_transposed
Rule 40    minus_matrix -> - matrix
Rule 41    matrix_transposed -> matrix '
Rule 42    variable -> ID
Rule 43    ref_var -> variable [ expr_list ]
Rule 44    expr_list -> expr_list , arithmetic_expression
Rule 45    expr_list -> arithmetic_expression
Rule 46    relational_expression -> arithmetic_expression > arithmetic_expression
Rule 47    relational_expression -> arithmetic_expression GE arithmetic_expression
Rule 48    relational_expression -> arithmetic_expression < arithmetic_expression
Rule 49    relational_expression -> arithmetic_expression LE arithmetic_expression
Rule 50    relational_expression -> arithmetic_expression EQ arithmetic_expression
Rule 51    relational_expression -> arithmetic_expression NE arithmetic_expression
Rule 52    relational_expression -> ( relational_expression )
Rule 53    relational_expression -> arithmetic_expression
Rule 54    arithmetic_expression -> const
Rule 55    arithmetic_expression -> vector
Rule 56    arithmetic_expression -> variable
Rule 57    arithmetic_expression -> matrix
Rule 58    arithmetic_expression -> minus_matrix
Rule 59    arithmetic_expression -> matrix_function
Rule 60    arithmetic_expression -> matrix_operation
Rule 61    arithmetic_expression -> arithmetic_expression + arithmetic_expression
Rule 62    arithmetic_expression -> arithmetic_expression - arithmetic_expression
Rule 63    arithmetic_expression -> arithmetic_expression * arithmetic_expression
Rule 64    arithmetic_expression -> arithmetic_expression / arithmetic_expression
Rule 65    arithmetic_expression -> ( arithmetic_expression )
Rule 66    vector -> [ vector_row ]
Rule 67    vector_row -> vector_row ; expr_list
Rule 68    vector_row -> expr_list
Rule 69    matrix_function -> ZEROS ( const , const )
Rule 70    matrix_function -> ONES ( const , const )
Rule 71    matrix_function -> EYE ( const , const )
Rule 72    matrix_function -> ZEROS ( const )
Rule 73    matrix_function -> ONES ( const )
Rule 74    matrix_function -> EYE ( const )
Rule 75    matrix_operation -> matrix DOTADD matrix
Rule 76    matrix_operation -> matrix DOTSUB matrix
Rule 77    matrix_operation -> matrix DOTMUL matrix
Rule 78    matrix_operation -> matrix DOTDIV matrix

Terminals, with rules where they appear

'                    : 41
(                    : 20 21 22 23 24 25 52 65 69 70 71 72 73 74
)                    : 20 21 22 23 24 25 52 65 69 70 71 72 73 74
*                    : 63
+                    : 61
,                    : 44 69 70 71
-                    : 40 62
/                    : 64
:                    : 27
;                    : 13 14 28 29 30 31 32 67
<                    : 48
=                    : 15 26
>                    : 46
ADDASSIGN            : 16
BREAK                : 30
COMMENT              : 
CONTINUE             : 32
DIVASSIGN            : 19
DOTADD               : 75
DOTDIV               : 78
DOTMUL               : 77
DOTSUB               : 76
ELSE                 : 21 23
EQ                   : 50
EYE                  : 71 74
FLOATNUM             : 35
FOR                  : 26
GE                   : 47
GT                   : 
ID                   : 42
IF                   : 20 21 22 23
INTNUM               : 36
LE                   : 49
LT                   : 
MULASSIGN            : 18
NE                   : 51
ONES                 : 70 73
PRINT                : 28 29
RETURN               : 31
STRING               : 34
SUBASSIGN            : 17
TRANSPOSE            : 
UNARY_MINUS          : 
WHILE                : 24 25
ZEROS                : 69 72
[                    : 43 66
]                    : 43 66
error                : 22 23 25 29
{                    : 33
}                    : 33

Nonterminals, with rules where they appear

arithmetic_expression : 13 14 27 27 31 44 45 46 46 47 47 48 48 49 49 50 50 51 51 53 61 61 62 62 63 63 64 64 65
assignment           : 4
assignment_op        : 13 14
break_statement      : 9
const                : 54 69 69 70 70 71 71 72 73 74
continue_statement   : 10
curly_brackets_statement : 12
expr_list            : 28 43 44 67 68
for_statement        : 7
if_else_statement    : 5
matrix               : 40 41 57 75 75 76 76 77 77 78 78
matrix_function      : 59
matrix_operation     : 60
matrix_transposed    : 39
minus_matrix         : 38 58
print_statement      : 8
program              : 0
range_expression     : 26
ref_var              : 14
relational_expression : 20 21 24 52
return_statement     : 11
statement            : 2 3 20 21 21 22 23 23 24 25 26
statements           : 1 2 33
variable             : 13 26 37 43 56
vector               : 55
vector_row           : 66 67
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    $end            reduce using rule 1 (program -> statements .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 3

    (3) statements -> statement .

    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    CONTINUE        reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    {               reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    BREAK           reduce using rule 4 (statement -> assignment .)
    CONTINUE        reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    {               reduce using rule 4 (statement -> assignment .)
    ID              reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)
    ELSE            reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> if_else_statement .

    IF              reduce using rule 5 (statement -> if_else_statement .)
    WHILE           reduce using rule 5 (statement -> if_else_statement .)
    FOR             reduce using rule 5 (statement -> if_else_statement .)
    PRINT           reduce using rule 5 (statement -> if_else_statement .)
    BREAK           reduce using rule 5 (statement -> if_else_statement .)
    CONTINUE        reduce using rule 5 (statement -> if_else_statement .)
    RETURN          reduce using rule 5 (statement -> if_else_statement .)
    {               reduce using rule 5 (statement -> if_else_statement .)
    ID              reduce using rule 5 (statement -> if_else_statement .)
    $end            reduce using rule 5 (statement -> if_else_statement .)
    }               reduce using rule 5 (statement -> if_else_statement .)
    ELSE            reduce using rule 5 (statement -> if_else_statement .)


state 6

    (6) statement -> while_statement .

    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    FOR             reduce using rule 6 (statement -> while_statement .)
    PRINT           reduce using rule 6 (statement -> while_statement .)
    BREAK           reduce using rule 6 (statement -> while_statement .)
    CONTINUE        reduce using rule 6 (statement -> while_statement .)
    RETURN          reduce using rule 6 (statement -> while_statement .)
    {               reduce using rule 6 (statement -> while_statement .)
    ID              reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    }               reduce using rule 6 (statement -> while_statement .)
    ELSE            reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> for_statement .

    IF              reduce using rule 7 (statement -> for_statement .)
    WHILE           reduce using rule 7 (statement -> for_statement .)
    FOR             reduce using rule 7 (statement -> for_statement .)
    PRINT           reduce using rule 7 (statement -> for_statement .)
    BREAK           reduce using rule 7 (statement -> for_statement .)
    CONTINUE        reduce using rule 7 (statement -> for_statement .)
    RETURN          reduce using rule 7 (statement -> for_statement .)
    {               reduce using rule 7 (statement -> for_statement .)
    ID              reduce using rule 7 (statement -> for_statement .)
    $end            reduce using rule 7 (statement -> for_statement .)
    }               reduce using rule 7 (statement -> for_statement .)
    ELSE            reduce using rule 7 (statement -> for_statement .)


state 8

    (8) statement -> print_statement .

    IF              reduce using rule 8 (statement -> print_statement .)
    WHILE           reduce using rule 8 (statement -> print_statement .)
    FOR             reduce using rule 8 (statement -> print_statement .)
    PRINT           reduce using rule 8 (statement -> print_statement .)
    BREAK           reduce using rule 8 (statement -> print_statement .)
    CONTINUE        reduce using rule 8 (statement -> print_statement .)
    RETURN          reduce using rule 8 (statement -> print_statement .)
    {               reduce using rule 8 (statement -> print_statement .)
    ID              reduce using rule 8 (statement -> print_statement .)
    $end            reduce using rule 8 (statement -> print_statement .)
    }               reduce using rule 8 (statement -> print_statement .)
    ELSE            reduce using rule 8 (statement -> print_statement .)


state 9

    (9) statement -> break_statement .

    IF              reduce using rule 9 (statement -> break_statement .)
    WHILE           reduce using rule 9 (statement -> break_statement .)
    FOR             reduce using rule 9 (statement -> break_statement .)
    PRINT           reduce using rule 9 (statement -> break_statement .)
    BREAK           reduce using rule 9 (statement -> break_statement .)
    CONTINUE        reduce using rule 9 (statement -> break_statement .)
    RETURN          reduce using rule 9 (statement -> break_statement .)
    {               reduce using rule 9 (statement -> break_statement .)
    ID              reduce using rule 9 (statement -> break_statement .)
    $end            reduce using rule 9 (statement -> break_statement .)
    }               reduce using rule 9 (statement -> break_statement .)
    ELSE            reduce using rule 9 (statement -> break_statement .)


state 10

    (10) statement -> continue_statement .

    IF              reduce using rule 10 (statement -> continue_statement .)
    WHILE           reduce using rule 10 (statement -> continue_statement .)
    FOR             reduce using rule 10 (statement -> continue_statement .)
    PRINT           reduce using rule 10 (statement -> continue_statement .)
    BREAK           reduce using rule 10 (statement -> continue_statement .)
    CONTINUE        reduce using rule 10 (statement -> continue_statement .)
    RETURN          reduce using rule 10 (statement -> continue_statement .)
    {               reduce using rule 10 (statement -> continue_statement .)
    ID              reduce using rule 10 (statement -> continue_statement .)
    $end            reduce using rule 10 (statement -> continue_statement .)
    }               reduce using rule 10 (statement -> continue_statement .)
    ELSE            reduce using rule 10 (statement -> continue_statement .)


state 11

    (11) statement -> return_statement .

    IF              reduce using rule 11 (statement -> return_statement .)
    WHILE           reduce using rule 11 (statement -> return_statement .)
    FOR             reduce using rule 11 (statement -> return_statement .)
    PRINT           reduce using rule 11 (statement -> return_statement .)
    BREAK           reduce using rule 11 (statement -> return_statement .)
    CONTINUE        reduce using rule 11 (statement -> return_statement .)
    RETURN          reduce using rule 11 (statement -> return_statement .)
    {               reduce using rule 11 (statement -> return_statement .)
    ID              reduce using rule 11 (statement -> return_statement .)
    $end            reduce using rule 11 (statement -> return_statement .)
    }               reduce using rule 11 (statement -> return_statement .)
    ELSE            reduce using rule 11 (statement -> return_statement .)


state 12

    (12) statement -> curly_brackets_statement .

    IF              reduce using rule 12 (statement -> curly_brackets_statement .)
    WHILE           reduce using rule 12 (statement -> curly_brackets_statement .)
    FOR             reduce using rule 12 (statement -> curly_brackets_statement .)
    PRINT           reduce using rule 12 (statement -> curly_brackets_statement .)
    BREAK           reduce using rule 12 (statement -> curly_brackets_statement .)
    CONTINUE        reduce using rule 12 (statement -> curly_brackets_statement .)
    RETURN          reduce using rule 12 (statement -> curly_brackets_statement .)
    {               reduce using rule 12 (statement -> curly_brackets_statement .)
    ID              reduce using rule 12 (statement -> curly_brackets_statement .)
    $end            reduce using rule 12 (statement -> curly_brackets_statement .)
    }               reduce using rule 12 (statement -> curly_brackets_statement .)
    ELSE            reduce using rule 12 (statement -> curly_brackets_statement .)


state 13

    (13) assignment -> variable . assignment_op arithmetic_expression ;
    (43) ref_var -> variable . [ expr_list ]
    (15) assignment_op -> . =
    (16) assignment_op -> . ADDASSIGN
    (17) assignment_op -> . SUBASSIGN
    (18) assignment_op -> . MULASSIGN
    (19) assignment_op -> . DIVASSIGN

    [               shift and go to state 26
    =               shift and go to state 27
    ADDASSIGN       shift and go to state 28
    SUBASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31

    assignment_op                  shift and go to state 25

state 14

    (14) assignment -> ref_var . assignment_op arithmetic_expression ;
    (15) assignment_op -> . =
    (16) assignment_op -> . ADDASSIGN
    (17) assignment_op -> . SUBASSIGN
    (18) assignment_op -> . MULASSIGN
    (19) assignment_op -> . DIVASSIGN

    =               shift and go to state 27
    ADDASSIGN       shift and go to state 28
    SUBASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31

    assignment_op                  shift and go to state 32

state 15

    (20) if_else_statement -> IF . ( relational_expression ) statement
    (21) if_else_statement -> IF . ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> IF . ( error ) statement
    (23) if_else_statement -> IF . ( error ) statement ELSE statement

    (               shift and go to state 33


state 16

    (24) while_statement -> WHILE . ( relational_expression ) statement
    (25) while_statement -> WHILE . ( error ) statement

    (               shift and go to state 34


state 17

    (26) for_statement -> FOR . variable = range_expression statement
    (42) variable -> . ID

    ID              shift and go to state 23

    variable                       shift and go to state 35

state 18

    (28) print_statement -> PRINT . expr_list ;
    (29) print_statement -> PRINT . error ;
    (44) expr_list -> . expr_list , arithmetic_expression
    (45) expr_list -> . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    error           shift and go to state 37
    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    expr_list                      shift and go to state 36
    arithmetic_expression          shift and go to state 38
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 19

    (30) break_statement -> BREAK . ;

    ;               shift and go to state 56


state 20

    (32) continue_statement -> CONTINUE . ;

    ;               shift and go to state 57


state 21

    (31) return_statement -> RETURN . arithmetic_expression ;
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 58
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 22

    (33) curly_brackets_statement -> { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statements                     shift and go to state 59
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 23

    (42) variable -> ID .

    [               reduce using rule 42 (variable -> ID .)
    =               reduce using rule 42 (variable -> ID .)
    ADDASSIGN       reduce using rule 42 (variable -> ID .)
    SUBASSIGN       reduce using rule 42 (variable -> ID .)
    MULASSIGN       reduce using rule 42 (variable -> ID .)
    DIVASSIGN       reduce using rule 42 (variable -> ID .)
    +               reduce using rule 42 (variable -> ID .)
    -               reduce using rule 42 (variable -> ID .)
    *               reduce using rule 42 (variable -> ID .)
    /               reduce using rule 42 (variable -> ID .)
    ;               reduce using rule 42 (variable -> ID .)
    ,               reduce using rule 42 (variable -> ID .)
    DOTADD          reduce using rule 42 (variable -> ID .)
    DOTSUB          reduce using rule 42 (variable -> ID .)
    DOTMUL          reduce using rule 42 (variable -> ID .)
    DOTDIV          reduce using rule 42 (variable -> ID .)
    '               reduce using rule 42 (variable -> ID .)
    ]               reduce using rule 42 (variable -> ID .)
    >               reduce using rule 42 (variable -> ID .)
    GE              reduce using rule 42 (variable -> ID .)
    <               reduce using rule 42 (variable -> ID .)
    LE              reduce using rule 42 (variable -> ID .)
    EQ              reduce using rule 42 (variable -> ID .)
    NE              reduce using rule 42 (variable -> ID .)
    )               reduce using rule 42 (variable -> ID .)
    :               reduce using rule 42 (variable -> ID .)
    IF              reduce using rule 42 (variable -> ID .)
    WHILE           reduce using rule 42 (variable -> ID .)
    FOR             reduce using rule 42 (variable -> ID .)
    PRINT           reduce using rule 42 (variable -> ID .)
    BREAK           reduce using rule 42 (variable -> ID .)
    CONTINUE        reduce using rule 42 (variable -> ID .)
    RETURN          reduce using rule 42 (variable -> ID .)
    {               reduce using rule 42 (variable -> ID .)
    ID              reduce using rule 42 (variable -> ID .)


state 24

    (2) statements -> statements statement .

    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    CONTINUE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    {               reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 25

    (13) assignment -> variable assignment_op . arithmetic_expression ;
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    variable                       shift and go to state 41
    arithmetic_expression          shift and go to state 60
    const                          shift and go to state 39
    vector                         shift and go to state 40
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 26

    (43) ref_var -> variable [ . expr_list ]
    (44) expr_list -> . expr_list , arithmetic_expression
    (45) expr_list -> . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    variable                       shift and go to state 41
    expr_list                      shift and go to state 61
    arithmetic_expression          shift and go to state 38
    const                          shift and go to state 39
    vector                         shift and go to state 40
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 27

    (15) assignment_op -> = .

    (               reduce using rule 15 (assignment_op -> = .)
    STRING          reduce using rule 15 (assignment_op -> = .)
    FLOATNUM        reduce using rule 15 (assignment_op -> = .)
    INTNUM          reduce using rule 15 (assignment_op -> = .)
    [               reduce using rule 15 (assignment_op -> = .)
    ID              reduce using rule 15 (assignment_op -> = .)
    -               reduce using rule 15 (assignment_op -> = .)
    ZEROS           reduce using rule 15 (assignment_op -> = .)
    ONES            reduce using rule 15 (assignment_op -> = .)
    EYE             reduce using rule 15 (assignment_op -> = .)


state 28

    (16) assignment_op -> ADDASSIGN .

    (               reduce using rule 16 (assignment_op -> ADDASSIGN .)
    STRING          reduce using rule 16 (assignment_op -> ADDASSIGN .)
    FLOATNUM        reduce using rule 16 (assignment_op -> ADDASSIGN .)
    INTNUM          reduce using rule 16 (assignment_op -> ADDASSIGN .)
    [               reduce using rule 16 (assignment_op -> ADDASSIGN .)
    ID              reduce using rule 16 (assignment_op -> ADDASSIGN .)
    -               reduce using rule 16 (assignment_op -> ADDASSIGN .)
    ZEROS           reduce using rule 16 (assignment_op -> ADDASSIGN .)
    ONES            reduce using rule 16 (assignment_op -> ADDASSIGN .)
    EYE             reduce using rule 16 (assignment_op -> ADDASSIGN .)


state 29

    (17) assignment_op -> SUBASSIGN .

    (               reduce using rule 17 (assignment_op -> SUBASSIGN .)
    STRING          reduce using rule 17 (assignment_op -> SUBASSIGN .)
    FLOATNUM        reduce using rule 17 (assignment_op -> SUBASSIGN .)
    INTNUM          reduce using rule 17 (assignment_op -> SUBASSIGN .)
    [               reduce using rule 17 (assignment_op -> SUBASSIGN .)
    ID              reduce using rule 17 (assignment_op -> SUBASSIGN .)
    -               reduce using rule 17 (assignment_op -> SUBASSIGN .)
    ZEROS           reduce using rule 17 (assignment_op -> SUBASSIGN .)
    ONES            reduce using rule 17 (assignment_op -> SUBASSIGN .)
    EYE             reduce using rule 17 (assignment_op -> SUBASSIGN .)


state 30

    (18) assignment_op -> MULASSIGN .

    (               reduce using rule 18 (assignment_op -> MULASSIGN .)
    STRING          reduce using rule 18 (assignment_op -> MULASSIGN .)
    FLOATNUM        reduce using rule 18 (assignment_op -> MULASSIGN .)
    INTNUM          reduce using rule 18 (assignment_op -> MULASSIGN .)
    [               reduce using rule 18 (assignment_op -> MULASSIGN .)
    ID              reduce using rule 18 (assignment_op -> MULASSIGN .)
    -               reduce using rule 18 (assignment_op -> MULASSIGN .)
    ZEROS           reduce using rule 18 (assignment_op -> MULASSIGN .)
    ONES            reduce using rule 18 (assignment_op -> MULASSIGN .)
    EYE             reduce using rule 18 (assignment_op -> MULASSIGN .)


state 31

    (19) assignment_op -> DIVASSIGN .

    (               reduce using rule 19 (assignment_op -> DIVASSIGN .)
    STRING          reduce using rule 19 (assignment_op -> DIVASSIGN .)
    FLOATNUM        reduce using rule 19 (assignment_op -> DIVASSIGN .)
    INTNUM          reduce using rule 19 (assignment_op -> DIVASSIGN .)
    [               reduce using rule 19 (assignment_op -> DIVASSIGN .)
    ID              reduce using rule 19 (assignment_op -> DIVASSIGN .)
    -               reduce using rule 19 (assignment_op -> DIVASSIGN .)
    ZEROS           reduce using rule 19 (assignment_op -> DIVASSIGN .)
    ONES            reduce using rule 19 (assignment_op -> DIVASSIGN .)
    EYE             reduce using rule 19 (assignment_op -> DIVASSIGN .)


state 32

    (14) assignment -> ref_var assignment_op . arithmetic_expression ;
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 62
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 33

    (20) if_else_statement -> IF ( . relational_expression ) statement
    (21) if_else_statement -> IF ( . relational_expression ) statement ELSE statement
    (22) if_else_statement -> IF ( . error ) statement
    (23) if_else_statement -> IF ( . error ) statement ELSE statement
    (46) relational_expression -> . arithmetic_expression > arithmetic_expression
    (47) relational_expression -> . arithmetic_expression GE arithmetic_expression
    (48) relational_expression -> . arithmetic_expression < arithmetic_expression
    (49) relational_expression -> . arithmetic_expression LE arithmetic_expression
    (50) relational_expression -> . arithmetic_expression EQ arithmetic_expression
    (51) relational_expression -> . arithmetic_expression NE arithmetic_expression
    (52) relational_expression -> . ( relational_expression )
    (53) relational_expression -> . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    error           shift and go to state 65
    (               shift and go to state 63
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    relational_expression          shift and go to state 64
    arithmetic_expression          shift and go to state 66
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 34

    (24) while_statement -> WHILE ( . relational_expression ) statement
    (25) while_statement -> WHILE ( . error ) statement
    (46) relational_expression -> . arithmetic_expression > arithmetic_expression
    (47) relational_expression -> . arithmetic_expression GE arithmetic_expression
    (48) relational_expression -> . arithmetic_expression < arithmetic_expression
    (49) relational_expression -> . arithmetic_expression LE arithmetic_expression
    (50) relational_expression -> . arithmetic_expression EQ arithmetic_expression
    (51) relational_expression -> . arithmetic_expression NE arithmetic_expression
    (52) relational_expression -> . ( relational_expression )
    (53) relational_expression -> . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    error           shift and go to state 68
    (               shift and go to state 63
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    relational_expression          shift and go to state 67
    arithmetic_expression          shift and go to state 66
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 35

    (26) for_statement -> FOR variable . = range_expression statement

    =               shift and go to state 69


state 36

    (28) print_statement -> PRINT expr_list . ;
    (44) expr_list -> expr_list . , arithmetic_expression

    ;               shift and go to state 70
    ,               shift and go to state 71


state 37

    (29) print_statement -> PRINT error . ;

    ;               shift and go to state 72


state 38

    (45) expr_list -> arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    ;               reduce using rule 45 (expr_list -> arithmetic_expression .)
    ,               reduce using rule 45 (expr_list -> arithmetic_expression .)
    ]               reduce using rule 45 (expr_list -> arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 39

    (54) arithmetic_expression -> const .

    +               reduce using rule 54 (arithmetic_expression -> const .)
    -               reduce using rule 54 (arithmetic_expression -> const .)
    *               reduce using rule 54 (arithmetic_expression -> const .)
    /               reduce using rule 54 (arithmetic_expression -> const .)
    ;               reduce using rule 54 (arithmetic_expression -> const .)
    ,               reduce using rule 54 (arithmetic_expression -> const .)
    ]               reduce using rule 54 (arithmetic_expression -> const .)
    >               reduce using rule 54 (arithmetic_expression -> const .)
    GE              reduce using rule 54 (arithmetic_expression -> const .)
    <               reduce using rule 54 (arithmetic_expression -> const .)
    LE              reduce using rule 54 (arithmetic_expression -> const .)
    EQ              reduce using rule 54 (arithmetic_expression -> const .)
    NE              reduce using rule 54 (arithmetic_expression -> const .)
    )               reduce using rule 54 (arithmetic_expression -> const .)
    :               reduce using rule 54 (arithmetic_expression -> const .)
    IF              reduce using rule 54 (arithmetic_expression -> const .)
    WHILE           reduce using rule 54 (arithmetic_expression -> const .)
    FOR             reduce using rule 54 (arithmetic_expression -> const .)
    PRINT           reduce using rule 54 (arithmetic_expression -> const .)
    BREAK           reduce using rule 54 (arithmetic_expression -> const .)
    CONTINUE        reduce using rule 54 (arithmetic_expression -> const .)
    RETURN          reduce using rule 54 (arithmetic_expression -> const .)
    {               reduce using rule 54 (arithmetic_expression -> const .)
    ID              reduce using rule 54 (arithmetic_expression -> const .)


state 40

    (55) arithmetic_expression -> vector .

    +               reduce using rule 55 (arithmetic_expression -> vector .)
    -               reduce using rule 55 (arithmetic_expression -> vector .)
    *               reduce using rule 55 (arithmetic_expression -> vector .)
    /               reduce using rule 55 (arithmetic_expression -> vector .)
    ;               reduce using rule 55 (arithmetic_expression -> vector .)
    ,               reduce using rule 55 (arithmetic_expression -> vector .)
    ]               reduce using rule 55 (arithmetic_expression -> vector .)
    >               reduce using rule 55 (arithmetic_expression -> vector .)
    GE              reduce using rule 55 (arithmetic_expression -> vector .)
    <               reduce using rule 55 (arithmetic_expression -> vector .)
    LE              reduce using rule 55 (arithmetic_expression -> vector .)
    EQ              reduce using rule 55 (arithmetic_expression -> vector .)
    NE              reduce using rule 55 (arithmetic_expression -> vector .)
    )               reduce using rule 55 (arithmetic_expression -> vector .)
    :               reduce using rule 55 (arithmetic_expression -> vector .)
    IF              reduce using rule 55 (arithmetic_expression -> vector .)
    WHILE           reduce using rule 55 (arithmetic_expression -> vector .)
    FOR             reduce using rule 55 (arithmetic_expression -> vector .)
    PRINT           reduce using rule 55 (arithmetic_expression -> vector .)
    BREAK           reduce using rule 55 (arithmetic_expression -> vector .)
    CONTINUE        reduce using rule 55 (arithmetic_expression -> vector .)
    RETURN          reduce using rule 55 (arithmetic_expression -> vector .)
    {               reduce using rule 55 (arithmetic_expression -> vector .)
    ID              reduce using rule 55 (arithmetic_expression -> vector .)


state 41

    (56) arithmetic_expression -> variable .
    (37) matrix -> variable .

  ! reduce/reduce conflict for + resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for - resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for * resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for / resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for ; resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for , resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for ] resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for > resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for GE resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for < resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for LE resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for EQ resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for NE resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for ) resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for : resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for IF resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for WHILE resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for PRINT resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for BREAK resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for RETURN resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for { resolved using rule 37 (matrix -> variable .)
  ! reduce/reduce conflict for ID resolved using rule 37 (matrix -> variable .)
    DOTADD          reduce using rule 37 (matrix -> variable .)
    DOTSUB          reduce using rule 37 (matrix -> variable .)
    DOTMUL          reduce using rule 37 (matrix -> variable .)
    DOTDIV          reduce using rule 37 (matrix -> variable .)
    '               reduce using rule 37 (matrix -> variable .)
    +               reduce using rule 37 (matrix -> variable .)
    -               reduce using rule 37 (matrix -> variable .)
    *               reduce using rule 37 (matrix -> variable .)
    /               reduce using rule 37 (matrix -> variable .)
    ;               reduce using rule 37 (matrix -> variable .)
    ,               reduce using rule 37 (matrix -> variable .)
    ]               reduce using rule 37 (matrix -> variable .)
    >               reduce using rule 37 (matrix -> variable .)
    GE              reduce using rule 37 (matrix -> variable .)
    <               reduce using rule 37 (matrix -> variable .)
    LE              reduce using rule 37 (matrix -> variable .)
    EQ              reduce using rule 37 (matrix -> variable .)
    NE              reduce using rule 37 (matrix -> variable .)
    )               reduce using rule 37 (matrix -> variable .)
    :               reduce using rule 37 (matrix -> variable .)
    IF              reduce using rule 37 (matrix -> variable .)
    WHILE           reduce using rule 37 (matrix -> variable .)
    FOR             reduce using rule 37 (matrix -> variable .)
    PRINT           reduce using rule 37 (matrix -> variable .)
    BREAK           reduce using rule 37 (matrix -> variable .)
    CONTINUE        reduce using rule 37 (matrix -> variable .)
    RETURN          reduce using rule 37 (matrix -> variable .)
    {               reduce using rule 37 (matrix -> variable .)
    ID              reduce using rule 37 (matrix -> variable .)

  ! +               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! -               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! *               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! /               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! ;               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! ,               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! ]               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! >               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! GE              [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! <               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! LE              [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! EQ              [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! NE              [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! )               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! :               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! IF              [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! WHILE           [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! FOR             [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! PRINT           [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! BREAK           [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! CONTINUE        [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! RETURN          [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! {               [ reduce using rule 56 (arithmetic_expression -> variable .) ]
  ! ID              [ reduce using rule 56 (arithmetic_expression -> variable .) ]


state 42

    (57) arithmetic_expression -> matrix .
    (75) matrix_operation -> matrix . DOTADD matrix
    (76) matrix_operation -> matrix . DOTSUB matrix
    (77) matrix_operation -> matrix . DOTMUL matrix
    (78) matrix_operation -> matrix . DOTDIV matrix
    (41) matrix_transposed -> matrix . '

    +               reduce using rule 57 (arithmetic_expression -> matrix .)
    -               reduce using rule 57 (arithmetic_expression -> matrix .)
    *               reduce using rule 57 (arithmetic_expression -> matrix .)
    /               reduce using rule 57 (arithmetic_expression -> matrix .)
    ;               reduce using rule 57 (arithmetic_expression -> matrix .)
    ,               reduce using rule 57 (arithmetic_expression -> matrix .)
    ]               reduce using rule 57 (arithmetic_expression -> matrix .)
    >               reduce using rule 57 (arithmetic_expression -> matrix .)
    GE              reduce using rule 57 (arithmetic_expression -> matrix .)
    <               reduce using rule 57 (arithmetic_expression -> matrix .)
    LE              reduce using rule 57 (arithmetic_expression -> matrix .)
    EQ              reduce using rule 57 (arithmetic_expression -> matrix .)
    NE              reduce using rule 57 (arithmetic_expression -> matrix .)
    )               reduce using rule 57 (arithmetic_expression -> matrix .)
    :               reduce using rule 57 (arithmetic_expression -> matrix .)
    IF              reduce using rule 57 (arithmetic_expression -> matrix .)
    WHILE           reduce using rule 57 (arithmetic_expression -> matrix .)
    FOR             reduce using rule 57 (arithmetic_expression -> matrix .)
    PRINT           reduce using rule 57 (arithmetic_expression -> matrix .)
    BREAK           reduce using rule 57 (arithmetic_expression -> matrix .)
    CONTINUE        reduce using rule 57 (arithmetic_expression -> matrix .)
    RETURN          reduce using rule 57 (arithmetic_expression -> matrix .)
    {               reduce using rule 57 (arithmetic_expression -> matrix .)
    ID              reduce using rule 57 (arithmetic_expression -> matrix .)
    DOTADD          shift and go to state 77
    DOTSUB          shift and go to state 78
    DOTMUL          shift and go to state 79
    DOTDIV          shift and go to state 80
    '               shift and go to state 81


state 43

    (58) arithmetic_expression -> minus_matrix .
    (38) matrix -> minus_matrix .

  ! reduce/reduce conflict for + resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for - resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for * resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for / resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for ; resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for , resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for ] resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for > resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for GE resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for < resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for LE resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for EQ resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for NE resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for ) resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for : resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for IF resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for PRINT resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for BREAK resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for { resolved using rule 38 (matrix -> minus_matrix .)
  ! reduce/reduce conflict for ID resolved using rule 38 (matrix -> minus_matrix .)
    DOTADD          reduce using rule 38 (matrix -> minus_matrix .)
    DOTSUB          reduce using rule 38 (matrix -> minus_matrix .)
    DOTMUL          reduce using rule 38 (matrix -> minus_matrix .)
    DOTDIV          reduce using rule 38 (matrix -> minus_matrix .)
    '               reduce using rule 38 (matrix -> minus_matrix .)
    +               reduce using rule 38 (matrix -> minus_matrix .)
    -               reduce using rule 38 (matrix -> minus_matrix .)
    *               reduce using rule 38 (matrix -> minus_matrix .)
    /               reduce using rule 38 (matrix -> minus_matrix .)
    ;               reduce using rule 38 (matrix -> minus_matrix .)
    ,               reduce using rule 38 (matrix -> minus_matrix .)
    ]               reduce using rule 38 (matrix -> minus_matrix .)
    >               reduce using rule 38 (matrix -> minus_matrix .)
    GE              reduce using rule 38 (matrix -> minus_matrix .)
    <               reduce using rule 38 (matrix -> minus_matrix .)
    LE              reduce using rule 38 (matrix -> minus_matrix .)
    EQ              reduce using rule 38 (matrix -> minus_matrix .)
    NE              reduce using rule 38 (matrix -> minus_matrix .)
    )               reduce using rule 38 (matrix -> minus_matrix .)
    :               reduce using rule 38 (matrix -> minus_matrix .)
    IF              reduce using rule 38 (matrix -> minus_matrix .)
    WHILE           reduce using rule 38 (matrix -> minus_matrix .)
    FOR             reduce using rule 38 (matrix -> minus_matrix .)
    PRINT           reduce using rule 38 (matrix -> minus_matrix .)
    BREAK           reduce using rule 38 (matrix -> minus_matrix .)
    CONTINUE        reduce using rule 38 (matrix -> minus_matrix .)
    RETURN          reduce using rule 38 (matrix -> minus_matrix .)
    {               reduce using rule 38 (matrix -> minus_matrix .)
    ID              reduce using rule 38 (matrix -> minus_matrix .)

  ! +               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! -               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! *               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! /               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! ;               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! ,               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! ]               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! >               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! GE              [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! <               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! LE              [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! EQ              [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! NE              [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! )               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! :               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! IF              [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! WHILE           [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! FOR             [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! PRINT           [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! BREAK           [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! CONTINUE        [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! RETURN          [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! {               [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]
  ! ID              [ reduce using rule 58 (arithmetic_expression -> minus_matrix .) ]


state 44

    (59) arithmetic_expression -> matrix_function .

    +               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    -               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    *               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    /               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    ;               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    ,               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    ]               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    >               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    GE              reduce using rule 59 (arithmetic_expression -> matrix_function .)
    <               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    LE              reduce using rule 59 (arithmetic_expression -> matrix_function .)
    EQ              reduce using rule 59 (arithmetic_expression -> matrix_function .)
    NE              reduce using rule 59 (arithmetic_expression -> matrix_function .)
    )               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    :               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    IF              reduce using rule 59 (arithmetic_expression -> matrix_function .)
    WHILE           reduce using rule 59 (arithmetic_expression -> matrix_function .)
    FOR             reduce using rule 59 (arithmetic_expression -> matrix_function .)
    PRINT           reduce using rule 59 (arithmetic_expression -> matrix_function .)
    BREAK           reduce using rule 59 (arithmetic_expression -> matrix_function .)
    CONTINUE        reduce using rule 59 (arithmetic_expression -> matrix_function .)
    RETURN          reduce using rule 59 (arithmetic_expression -> matrix_function .)
    {               reduce using rule 59 (arithmetic_expression -> matrix_function .)
    ID              reduce using rule 59 (arithmetic_expression -> matrix_function .)


state 45

    (60) arithmetic_expression -> matrix_operation .

    +               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    -               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    *               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    /               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    ;               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    ,               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    ]               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    >               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    GE              reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    <               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    LE              reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    EQ              reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    NE              reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    )               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    :               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    IF              reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    WHILE           reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    FOR             reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    PRINT           reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    BREAK           reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    CONTINUE        reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    RETURN          reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    {               reduce using rule 60 (arithmetic_expression -> matrix_operation .)
    ID              reduce using rule 60 (arithmetic_expression -> matrix_operation .)


state 46

    (40) minus_matrix -> - . matrix
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (42) variable -> . ID
    (40) minus_matrix -> . - matrix
    (41) matrix_transposed -> . matrix '

    ID              shift and go to state 23
    -               shift and go to state 46

    matrix                         shift and go to state 82
    variable                       shift and go to state 83
    minus_matrix                   shift and go to state 84
    matrix_transposed              shift and go to state 52

state 47

    (65) arithmetic_expression -> ( . arithmetic_expression )
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 85
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 48

    (34) const -> STRING .

    +               reduce using rule 34 (const -> STRING .)
    -               reduce using rule 34 (const -> STRING .)
    *               reduce using rule 34 (const -> STRING .)
    /               reduce using rule 34 (const -> STRING .)
    ;               reduce using rule 34 (const -> STRING .)
    ,               reduce using rule 34 (const -> STRING .)
    ]               reduce using rule 34 (const -> STRING .)
    >               reduce using rule 34 (const -> STRING .)
    GE              reduce using rule 34 (const -> STRING .)
    <               reduce using rule 34 (const -> STRING .)
    LE              reduce using rule 34 (const -> STRING .)
    EQ              reduce using rule 34 (const -> STRING .)
    NE              reduce using rule 34 (const -> STRING .)
    )               reduce using rule 34 (const -> STRING .)
    :               reduce using rule 34 (const -> STRING .)
    IF              reduce using rule 34 (const -> STRING .)
    WHILE           reduce using rule 34 (const -> STRING .)
    FOR             reduce using rule 34 (const -> STRING .)
    PRINT           reduce using rule 34 (const -> STRING .)
    BREAK           reduce using rule 34 (const -> STRING .)
    CONTINUE        reduce using rule 34 (const -> STRING .)
    RETURN          reduce using rule 34 (const -> STRING .)
    {               reduce using rule 34 (const -> STRING .)
    ID              reduce using rule 34 (const -> STRING .)


state 49

    (35) const -> FLOATNUM .

    +               reduce using rule 35 (const -> FLOATNUM .)
    -               reduce using rule 35 (const -> FLOATNUM .)
    *               reduce using rule 35 (const -> FLOATNUM .)
    /               reduce using rule 35 (const -> FLOATNUM .)
    ;               reduce using rule 35 (const -> FLOATNUM .)
    ,               reduce using rule 35 (const -> FLOATNUM .)
    ]               reduce using rule 35 (const -> FLOATNUM .)
    >               reduce using rule 35 (const -> FLOATNUM .)
    GE              reduce using rule 35 (const -> FLOATNUM .)
    <               reduce using rule 35 (const -> FLOATNUM .)
    LE              reduce using rule 35 (const -> FLOATNUM .)
    EQ              reduce using rule 35 (const -> FLOATNUM .)
    NE              reduce using rule 35 (const -> FLOATNUM .)
    )               reduce using rule 35 (const -> FLOATNUM .)
    :               reduce using rule 35 (const -> FLOATNUM .)
    IF              reduce using rule 35 (const -> FLOATNUM .)
    WHILE           reduce using rule 35 (const -> FLOATNUM .)
    FOR             reduce using rule 35 (const -> FLOATNUM .)
    PRINT           reduce using rule 35 (const -> FLOATNUM .)
    BREAK           reduce using rule 35 (const -> FLOATNUM .)
    CONTINUE        reduce using rule 35 (const -> FLOATNUM .)
    RETURN          reduce using rule 35 (const -> FLOATNUM .)
    {               reduce using rule 35 (const -> FLOATNUM .)
    ID              reduce using rule 35 (const -> FLOATNUM .)


state 50

    (36) const -> INTNUM .

    +               reduce using rule 36 (const -> INTNUM .)
    -               reduce using rule 36 (const -> INTNUM .)
    *               reduce using rule 36 (const -> INTNUM .)
    /               reduce using rule 36 (const -> INTNUM .)
    ;               reduce using rule 36 (const -> INTNUM .)
    ,               reduce using rule 36 (const -> INTNUM .)
    ]               reduce using rule 36 (const -> INTNUM .)
    >               reduce using rule 36 (const -> INTNUM .)
    GE              reduce using rule 36 (const -> INTNUM .)
    <               reduce using rule 36 (const -> INTNUM .)
    LE              reduce using rule 36 (const -> INTNUM .)
    EQ              reduce using rule 36 (const -> INTNUM .)
    NE              reduce using rule 36 (const -> INTNUM .)
    )               reduce using rule 36 (const -> INTNUM .)
    :               reduce using rule 36 (const -> INTNUM .)
    IF              reduce using rule 36 (const -> INTNUM .)
    WHILE           reduce using rule 36 (const -> INTNUM .)
    FOR             reduce using rule 36 (const -> INTNUM .)
    PRINT           reduce using rule 36 (const -> INTNUM .)
    BREAK           reduce using rule 36 (const -> INTNUM .)
    CONTINUE        reduce using rule 36 (const -> INTNUM .)
    RETURN          reduce using rule 36 (const -> INTNUM .)
    {               reduce using rule 36 (const -> INTNUM .)
    ID              reduce using rule 36 (const -> INTNUM .)


state 51

    (66) vector -> [ . vector_row ]
    (67) vector_row -> . vector_row ; expr_list
    (68) vector_row -> . expr_list
    (44) expr_list -> . expr_list , arithmetic_expression
    (45) expr_list -> . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    vector_row                     shift and go to state 86
    expr_list                      shift and go to state 87
    arithmetic_expression          shift and go to state 38
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 52

    (39) matrix -> matrix_transposed .

    DOTADD          reduce using rule 39 (matrix -> matrix_transposed .)
    DOTSUB          reduce using rule 39 (matrix -> matrix_transposed .)
    DOTMUL          reduce using rule 39 (matrix -> matrix_transposed .)
    DOTDIV          reduce using rule 39 (matrix -> matrix_transposed .)
    '               reduce using rule 39 (matrix -> matrix_transposed .)
    +               reduce using rule 39 (matrix -> matrix_transposed .)
    -               reduce using rule 39 (matrix -> matrix_transposed .)
    *               reduce using rule 39 (matrix -> matrix_transposed .)
    /               reduce using rule 39 (matrix -> matrix_transposed .)
    ;               reduce using rule 39 (matrix -> matrix_transposed .)
    ,               reduce using rule 39 (matrix -> matrix_transposed .)
    ]               reduce using rule 39 (matrix -> matrix_transposed .)
    >               reduce using rule 39 (matrix -> matrix_transposed .)
    GE              reduce using rule 39 (matrix -> matrix_transposed .)
    <               reduce using rule 39 (matrix -> matrix_transposed .)
    LE              reduce using rule 39 (matrix -> matrix_transposed .)
    EQ              reduce using rule 39 (matrix -> matrix_transposed .)
    NE              reduce using rule 39 (matrix -> matrix_transposed .)
    )               reduce using rule 39 (matrix -> matrix_transposed .)
    :               reduce using rule 39 (matrix -> matrix_transposed .)
    IF              reduce using rule 39 (matrix -> matrix_transposed .)
    WHILE           reduce using rule 39 (matrix -> matrix_transposed .)
    FOR             reduce using rule 39 (matrix -> matrix_transposed .)
    PRINT           reduce using rule 39 (matrix -> matrix_transposed .)
    BREAK           reduce using rule 39 (matrix -> matrix_transposed .)
    CONTINUE        reduce using rule 39 (matrix -> matrix_transposed .)
    RETURN          reduce using rule 39 (matrix -> matrix_transposed .)
    {               reduce using rule 39 (matrix -> matrix_transposed .)
    ID              reduce using rule 39 (matrix -> matrix_transposed .)


state 53

    (69) matrix_function -> ZEROS . ( const , const )
    (72) matrix_function -> ZEROS . ( const )

    (               shift and go to state 88


state 54

    (70) matrix_function -> ONES . ( const , const )
    (73) matrix_function -> ONES . ( const )

    (               shift and go to state 89


state 55

    (71) matrix_function -> EYE . ( const , const )
    (74) matrix_function -> EYE . ( const )

    (               shift and go to state 90


state 56

    (30) break_statement -> BREAK ; .

    IF              reduce using rule 30 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 30 (break_statement -> BREAK ; .)
    FOR             reduce using rule 30 (break_statement -> BREAK ; .)
    PRINT           reduce using rule 30 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 30 (break_statement -> BREAK ; .)
    CONTINUE        reduce using rule 30 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 30 (break_statement -> BREAK ; .)
    {               reduce using rule 30 (break_statement -> BREAK ; .)
    ID              reduce using rule 30 (break_statement -> BREAK ; .)
    $end            reduce using rule 30 (break_statement -> BREAK ; .)
    }               reduce using rule 30 (break_statement -> BREAK ; .)
    ELSE            reduce using rule 30 (break_statement -> BREAK ; .)


state 57

    (32) continue_statement -> CONTINUE ; .

    IF              reduce using rule 32 (continue_statement -> CONTINUE ; .)
    WHILE           reduce using rule 32 (continue_statement -> CONTINUE ; .)
    FOR             reduce using rule 32 (continue_statement -> CONTINUE ; .)
    PRINT           reduce using rule 32 (continue_statement -> CONTINUE ; .)
    BREAK           reduce using rule 32 (continue_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 32 (continue_statement -> CONTINUE ; .)
    RETURN          reduce using rule 32 (continue_statement -> CONTINUE ; .)
    {               reduce using rule 32 (continue_statement -> CONTINUE ; .)
    ID              reduce using rule 32 (continue_statement -> CONTINUE ; .)
    $end            reduce using rule 32 (continue_statement -> CONTINUE ; .)
    }               reduce using rule 32 (continue_statement -> CONTINUE ; .)
    ELSE            reduce using rule 32 (continue_statement -> CONTINUE ; .)


state 58

    (31) return_statement -> RETURN arithmetic_expression . ;
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    ;               shift and go to state 91
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 59

    (33) curly_brackets_statement -> { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    }               shift and go to state 92
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 60

    (13) assignment -> variable assignment_op arithmetic_expression . ;
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    ;               shift and go to state 93
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 61

    (43) ref_var -> variable [ expr_list . ]
    (44) expr_list -> expr_list . , arithmetic_expression

    ]               shift and go to state 94
    ,               shift and go to state 71


state 62

    (14) assignment -> ref_var assignment_op arithmetic_expression . ;
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    ;               shift and go to state 95
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 63

    (52) relational_expression -> ( . relational_expression )
    (65) arithmetic_expression -> ( . arithmetic_expression )
    (46) relational_expression -> . arithmetic_expression > arithmetic_expression
    (47) relational_expression -> . arithmetic_expression GE arithmetic_expression
    (48) relational_expression -> . arithmetic_expression < arithmetic_expression
    (49) relational_expression -> . arithmetic_expression LE arithmetic_expression
    (50) relational_expression -> . arithmetic_expression EQ arithmetic_expression
    (51) relational_expression -> . arithmetic_expression NE arithmetic_expression
    (52) relational_expression -> . ( relational_expression )
    (53) relational_expression -> . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 63
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    relational_expression          shift and go to state 96
    arithmetic_expression          shift and go to state 97
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 64

    (20) if_else_statement -> IF ( relational_expression . ) statement
    (21) if_else_statement -> IF ( relational_expression . ) statement ELSE statement

    )               shift and go to state 98


state 65

    (22) if_else_statement -> IF ( error . ) statement
    (23) if_else_statement -> IF ( error . ) statement ELSE statement

    )               shift and go to state 99


state 66

    (46) relational_expression -> arithmetic_expression . > arithmetic_expression
    (47) relational_expression -> arithmetic_expression . GE arithmetic_expression
    (48) relational_expression -> arithmetic_expression . < arithmetic_expression
    (49) relational_expression -> arithmetic_expression . LE arithmetic_expression
    (50) relational_expression -> arithmetic_expression . EQ arithmetic_expression
    (51) relational_expression -> arithmetic_expression . NE arithmetic_expression
    (53) relational_expression -> arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    >               shift and go to state 100
    GE              shift and go to state 101
    <               shift and go to state 102
    LE              shift and go to state 103
    EQ              shift and go to state 104
    NE              shift and go to state 105
    )               reduce using rule 53 (relational_expression -> arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 67

    (24) while_statement -> WHILE ( relational_expression . ) statement

    )               shift and go to state 106


state 68

    (25) while_statement -> WHILE ( error . ) statement

    )               shift and go to state 107


state 69

    (26) for_statement -> FOR variable = . range_expression statement
    (27) range_expression -> . arithmetic_expression : arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    variable                       shift and go to state 41
    range_expression               shift and go to state 108
    arithmetic_expression          shift and go to state 109
    const                          shift and go to state 39
    vector                         shift and go to state 40
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 70

    (28) print_statement -> PRINT expr_list ; .

    IF              reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    WHILE           reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    FOR             reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    PRINT           reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    BREAK           reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    RETURN          reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    {               reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    ID              reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    $end            reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    }               reduce using rule 28 (print_statement -> PRINT expr_list ; .)
    ELSE            reduce using rule 28 (print_statement -> PRINT expr_list ; .)


state 71

    (44) expr_list -> expr_list , . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 110
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 72

    (29) print_statement -> PRINT error ; .

    IF              reduce using rule 29 (print_statement -> PRINT error ; .)
    WHILE           reduce using rule 29 (print_statement -> PRINT error ; .)
    FOR             reduce using rule 29 (print_statement -> PRINT error ; .)
    PRINT           reduce using rule 29 (print_statement -> PRINT error ; .)
    BREAK           reduce using rule 29 (print_statement -> PRINT error ; .)
    CONTINUE        reduce using rule 29 (print_statement -> PRINT error ; .)
    RETURN          reduce using rule 29 (print_statement -> PRINT error ; .)
    {               reduce using rule 29 (print_statement -> PRINT error ; .)
    ID              reduce using rule 29 (print_statement -> PRINT error ; .)
    $end            reduce using rule 29 (print_statement -> PRINT error ; .)
    }               reduce using rule 29 (print_statement -> PRINT error ; .)
    ELSE            reduce using rule 29 (print_statement -> PRINT error ; .)


state 73

    (61) arithmetic_expression -> arithmetic_expression + . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 111
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 74

    (62) arithmetic_expression -> arithmetic_expression - . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 112
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 75

    (63) arithmetic_expression -> arithmetic_expression * . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 113
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 76

    (64) arithmetic_expression -> arithmetic_expression / . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 114
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 77

    (75) matrix_operation -> matrix DOTADD . matrix
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (42) variable -> . ID
    (40) minus_matrix -> . - matrix
    (41) matrix_transposed -> . matrix '

    ID              shift and go to state 23
    -               shift and go to state 46

    matrix                         shift and go to state 115
    variable                       shift and go to state 83
    minus_matrix                   shift and go to state 84
    matrix_transposed              shift and go to state 52

state 78

    (76) matrix_operation -> matrix DOTSUB . matrix
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (42) variable -> . ID
    (40) minus_matrix -> . - matrix
    (41) matrix_transposed -> . matrix '

    ID              shift and go to state 23
    -               shift and go to state 46

    matrix                         shift and go to state 116
    variable                       shift and go to state 83
    minus_matrix                   shift and go to state 84
    matrix_transposed              shift and go to state 52

state 79

    (77) matrix_operation -> matrix DOTMUL . matrix
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (42) variable -> . ID
    (40) minus_matrix -> . - matrix
    (41) matrix_transposed -> . matrix '

    ID              shift and go to state 23
    -               shift and go to state 46

    matrix                         shift and go to state 117
    variable                       shift and go to state 83
    minus_matrix                   shift and go to state 84
    matrix_transposed              shift and go to state 52

state 80

    (78) matrix_operation -> matrix DOTDIV . matrix
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (42) variable -> . ID
    (40) minus_matrix -> . - matrix
    (41) matrix_transposed -> . matrix '

    ID              shift and go to state 23
    -               shift and go to state 46

    matrix                         shift and go to state 118
    variable                       shift and go to state 83
    minus_matrix                   shift and go to state 84
    matrix_transposed              shift and go to state 52

state 81

    (41) matrix_transposed -> matrix ' .

    DOTADD          reduce using rule 41 (matrix_transposed -> matrix ' .)
    DOTSUB          reduce using rule 41 (matrix_transposed -> matrix ' .)
    DOTMUL          reduce using rule 41 (matrix_transposed -> matrix ' .)
    DOTDIV          reduce using rule 41 (matrix_transposed -> matrix ' .)
    '               reduce using rule 41 (matrix_transposed -> matrix ' .)
    +               reduce using rule 41 (matrix_transposed -> matrix ' .)
    -               reduce using rule 41 (matrix_transposed -> matrix ' .)
    *               reduce using rule 41 (matrix_transposed -> matrix ' .)
    /               reduce using rule 41 (matrix_transposed -> matrix ' .)
    ;               reduce using rule 41 (matrix_transposed -> matrix ' .)
    ,               reduce using rule 41 (matrix_transposed -> matrix ' .)
    ]               reduce using rule 41 (matrix_transposed -> matrix ' .)
    >               reduce using rule 41 (matrix_transposed -> matrix ' .)
    GE              reduce using rule 41 (matrix_transposed -> matrix ' .)
    <               reduce using rule 41 (matrix_transposed -> matrix ' .)
    LE              reduce using rule 41 (matrix_transposed -> matrix ' .)
    EQ              reduce using rule 41 (matrix_transposed -> matrix ' .)
    NE              reduce using rule 41 (matrix_transposed -> matrix ' .)
    )               reduce using rule 41 (matrix_transposed -> matrix ' .)
    :               reduce using rule 41 (matrix_transposed -> matrix ' .)
    IF              reduce using rule 41 (matrix_transposed -> matrix ' .)
    WHILE           reduce using rule 41 (matrix_transposed -> matrix ' .)
    FOR             reduce using rule 41 (matrix_transposed -> matrix ' .)
    PRINT           reduce using rule 41 (matrix_transposed -> matrix ' .)
    BREAK           reduce using rule 41 (matrix_transposed -> matrix ' .)
    CONTINUE        reduce using rule 41 (matrix_transposed -> matrix ' .)
    RETURN          reduce using rule 41 (matrix_transposed -> matrix ' .)
    {               reduce using rule 41 (matrix_transposed -> matrix ' .)
    ID              reduce using rule 41 (matrix_transposed -> matrix ' .)


state 82

    (40) minus_matrix -> - matrix .
    (41) matrix_transposed -> matrix . '

    +               reduce using rule 40 (minus_matrix -> - matrix .)
    -               reduce using rule 40 (minus_matrix -> - matrix .)
    *               reduce using rule 40 (minus_matrix -> - matrix .)
    /               reduce using rule 40 (minus_matrix -> - matrix .)
    ;               reduce using rule 40 (minus_matrix -> - matrix .)
    ,               reduce using rule 40 (minus_matrix -> - matrix .)
    DOTADD          reduce using rule 40 (minus_matrix -> - matrix .)
    DOTSUB          reduce using rule 40 (minus_matrix -> - matrix .)
    DOTMUL          reduce using rule 40 (minus_matrix -> - matrix .)
    DOTDIV          reduce using rule 40 (minus_matrix -> - matrix .)
    ]               reduce using rule 40 (minus_matrix -> - matrix .)
    >               reduce using rule 40 (minus_matrix -> - matrix .)
    GE              reduce using rule 40 (minus_matrix -> - matrix .)
    <               reduce using rule 40 (minus_matrix -> - matrix .)
    LE              reduce using rule 40 (minus_matrix -> - matrix .)
    EQ              reduce using rule 40 (minus_matrix -> - matrix .)
    NE              reduce using rule 40 (minus_matrix -> - matrix .)
    )               reduce using rule 40 (minus_matrix -> - matrix .)
    :               reduce using rule 40 (minus_matrix -> - matrix .)
    IF              reduce using rule 40 (minus_matrix -> - matrix .)
    WHILE           reduce using rule 40 (minus_matrix -> - matrix .)
    FOR             reduce using rule 40 (minus_matrix -> - matrix .)
    PRINT           reduce using rule 40 (minus_matrix -> - matrix .)
    BREAK           reduce using rule 40 (minus_matrix -> - matrix .)
    CONTINUE        reduce using rule 40 (minus_matrix -> - matrix .)
    RETURN          reduce using rule 40 (minus_matrix -> - matrix .)
    {               reduce using rule 40 (minus_matrix -> - matrix .)
    ID              reduce using rule 40 (minus_matrix -> - matrix .)
    '               shift and go to state 81

  ! '               [ reduce using rule 40 (minus_matrix -> - matrix .) ]


state 83

    (37) matrix -> variable .

    '               reduce using rule 37 (matrix -> variable .)
    +               reduce using rule 37 (matrix -> variable .)
    -               reduce using rule 37 (matrix -> variable .)
    *               reduce using rule 37 (matrix -> variable .)
    /               reduce using rule 37 (matrix -> variable .)
    ;               reduce using rule 37 (matrix -> variable .)
    ,               reduce using rule 37 (matrix -> variable .)
    DOTADD          reduce using rule 37 (matrix -> variable .)
    DOTSUB          reduce using rule 37 (matrix -> variable .)
    DOTMUL          reduce using rule 37 (matrix -> variable .)
    DOTDIV          reduce using rule 37 (matrix -> variable .)
    ]               reduce using rule 37 (matrix -> variable .)
    >               reduce using rule 37 (matrix -> variable .)
    GE              reduce using rule 37 (matrix -> variable .)
    <               reduce using rule 37 (matrix -> variable .)
    LE              reduce using rule 37 (matrix -> variable .)
    EQ              reduce using rule 37 (matrix -> variable .)
    NE              reduce using rule 37 (matrix -> variable .)
    )               reduce using rule 37 (matrix -> variable .)
    :               reduce using rule 37 (matrix -> variable .)
    IF              reduce using rule 37 (matrix -> variable .)
    WHILE           reduce using rule 37 (matrix -> variable .)
    FOR             reduce using rule 37 (matrix -> variable .)
    PRINT           reduce using rule 37 (matrix -> variable .)
    BREAK           reduce using rule 37 (matrix -> variable .)
    CONTINUE        reduce using rule 37 (matrix -> variable .)
    RETURN          reduce using rule 37 (matrix -> variable .)
    {               reduce using rule 37 (matrix -> variable .)
    ID              reduce using rule 37 (matrix -> variable .)


state 84

    (38) matrix -> minus_matrix .

    '               reduce using rule 38 (matrix -> minus_matrix .)
    +               reduce using rule 38 (matrix -> minus_matrix .)
    -               reduce using rule 38 (matrix -> minus_matrix .)
    *               reduce using rule 38 (matrix -> minus_matrix .)
    /               reduce using rule 38 (matrix -> minus_matrix .)
    ;               reduce using rule 38 (matrix -> minus_matrix .)
    ,               reduce using rule 38 (matrix -> minus_matrix .)
    DOTADD          reduce using rule 38 (matrix -> minus_matrix .)
    DOTSUB          reduce using rule 38 (matrix -> minus_matrix .)
    DOTMUL          reduce using rule 38 (matrix -> minus_matrix .)
    DOTDIV          reduce using rule 38 (matrix -> minus_matrix .)
    ]               reduce using rule 38 (matrix -> minus_matrix .)
    >               reduce using rule 38 (matrix -> minus_matrix .)
    GE              reduce using rule 38 (matrix -> minus_matrix .)
    <               reduce using rule 38 (matrix -> minus_matrix .)
    LE              reduce using rule 38 (matrix -> minus_matrix .)
    EQ              reduce using rule 38 (matrix -> minus_matrix .)
    NE              reduce using rule 38 (matrix -> minus_matrix .)
    )               reduce using rule 38 (matrix -> minus_matrix .)
    :               reduce using rule 38 (matrix -> minus_matrix .)
    IF              reduce using rule 38 (matrix -> minus_matrix .)
    WHILE           reduce using rule 38 (matrix -> minus_matrix .)
    FOR             reduce using rule 38 (matrix -> minus_matrix .)
    PRINT           reduce using rule 38 (matrix -> minus_matrix .)
    BREAK           reduce using rule 38 (matrix -> minus_matrix .)
    CONTINUE        reduce using rule 38 (matrix -> minus_matrix .)
    RETURN          reduce using rule 38 (matrix -> minus_matrix .)
    {               reduce using rule 38 (matrix -> minus_matrix .)
    ID              reduce using rule 38 (matrix -> minus_matrix .)


state 85

    (65) arithmetic_expression -> ( arithmetic_expression . )
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    )               shift and go to state 119
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 86

    (66) vector -> [ vector_row . ]
    (67) vector_row -> vector_row . ; expr_list

    ]               shift and go to state 120
    ;               shift and go to state 121


state 87

    (68) vector_row -> expr_list .
    (44) expr_list -> expr_list . , arithmetic_expression

    ]               reduce using rule 68 (vector_row -> expr_list .)
    ;               reduce using rule 68 (vector_row -> expr_list .)
    ,               shift and go to state 71


state 88

    (69) matrix_function -> ZEROS ( . const , const )
    (72) matrix_function -> ZEROS ( . const )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM

    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50

    const                          shift and go to state 122

state 89

    (70) matrix_function -> ONES ( . const , const )
    (73) matrix_function -> ONES ( . const )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM

    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50

    const                          shift and go to state 123

state 90

    (71) matrix_function -> EYE ( . const , const )
    (74) matrix_function -> EYE ( . const )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM

    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50

    const                          shift and go to state 124

state 91

    (31) return_statement -> RETURN arithmetic_expression ; .

    IF              reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    WHILE           reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    FOR             reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    PRINT           reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    BREAK           reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    CONTINUE        reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    RETURN          reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    {               reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    ID              reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    $end            reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    }               reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)
    ELSE            reduce using rule 31 (return_statement -> RETURN arithmetic_expression ; .)


state 92

    (33) curly_brackets_statement -> { statements } .

    IF              reduce using rule 33 (curly_brackets_statement -> { statements } .)
    WHILE           reduce using rule 33 (curly_brackets_statement -> { statements } .)
    FOR             reduce using rule 33 (curly_brackets_statement -> { statements } .)
    PRINT           reduce using rule 33 (curly_brackets_statement -> { statements } .)
    BREAK           reduce using rule 33 (curly_brackets_statement -> { statements } .)
    CONTINUE        reduce using rule 33 (curly_brackets_statement -> { statements } .)
    RETURN          reduce using rule 33 (curly_brackets_statement -> { statements } .)
    {               reduce using rule 33 (curly_brackets_statement -> { statements } .)
    ID              reduce using rule 33 (curly_brackets_statement -> { statements } .)
    $end            reduce using rule 33 (curly_brackets_statement -> { statements } .)
    }               reduce using rule 33 (curly_brackets_statement -> { statements } .)
    ELSE            reduce using rule 33 (curly_brackets_statement -> { statements } .)


state 93

    (13) assignment -> variable assignment_op arithmetic_expression ; .

    IF              reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    WHILE           reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    FOR             reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    PRINT           reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    BREAK           reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    CONTINUE        reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    RETURN          reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    {               reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    ID              reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    $end            reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    }               reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)
    ELSE            reduce using rule 13 (assignment -> variable assignment_op arithmetic_expression ; .)


state 94

    (43) ref_var -> variable [ expr_list ] .

    =               reduce using rule 43 (ref_var -> variable [ expr_list ] .)
    ADDASSIGN       reduce using rule 43 (ref_var -> variable [ expr_list ] .)
    SUBASSIGN       reduce using rule 43 (ref_var -> variable [ expr_list ] .)
    MULASSIGN       reduce using rule 43 (ref_var -> variable [ expr_list ] .)
    DIVASSIGN       reduce using rule 43 (ref_var -> variable [ expr_list ] .)


state 95

    (14) assignment -> ref_var assignment_op arithmetic_expression ; .

    IF              reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    WHILE           reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    FOR             reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    PRINT           reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    BREAK           reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    CONTINUE        reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    RETURN          reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    {               reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    ID              reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    $end            reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    }               reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)
    ELSE            reduce using rule 14 (assignment -> ref_var assignment_op arithmetic_expression ; .)


state 96

    (52) relational_expression -> ( relational_expression . )

    )               shift and go to state 125


state 97

    (65) arithmetic_expression -> ( arithmetic_expression . )
    (46) relational_expression -> arithmetic_expression . > arithmetic_expression
    (47) relational_expression -> arithmetic_expression . GE arithmetic_expression
    (48) relational_expression -> arithmetic_expression . < arithmetic_expression
    (49) relational_expression -> arithmetic_expression . LE arithmetic_expression
    (50) relational_expression -> arithmetic_expression . EQ arithmetic_expression
    (51) relational_expression -> arithmetic_expression . NE arithmetic_expression
    (53) relational_expression -> arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 119
    >               shift and go to state 100
    GE              shift and go to state 101
    <               shift and go to state 102
    LE              shift and go to state 103
    EQ              shift and go to state 104
    NE              shift and go to state 105
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76

  ! )               [ reduce using rule 53 (relational_expression -> arithmetic_expression .) ]


state 98

    (20) if_else_statement -> IF ( relational_expression ) . statement
    (21) if_else_statement -> IF ( relational_expression ) . statement ELSE statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 126
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 99

    (22) if_else_statement -> IF ( error ) . statement
    (23) if_else_statement -> IF ( error ) . statement ELSE statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 127
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 100

    (46) relational_expression -> arithmetic_expression > . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 128
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 101

    (47) relational_expression -> arithmetic_expression GE . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 129
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 102

    (48) relational_expression -> arithmetic_expression < . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 130
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 103

    (49) relational_expression -> arithmetic_expression LE . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 131
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 104

    (50) relational_expression -> arithmetic_expression EQ . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 132
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 105

    (51) relational_expression -> arithmetic_expression NE . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 133
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 106

    (24) while_statement -> WHILE ( relational_expression ) . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 134
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 107

    (25) while_statement -> WHILE ( error ) . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 135
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 108

    (26) for_statement -> FOR variable = range_expression . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    variable                       shift and go to state 13
    statement                      shift and go to state 136
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    ref_var                        shift and go to state 14

state 109

    (27) range_expression -> arithmetic_expression . : arithmetic_expression
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    :               shift and go to state 137
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 110

    (44) expr_list -> expr_list , arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    ;               reduce using rule 44 (expr_list -> expr_list , arithmetic_expression .)
    ,               reduce using rule 44 (expr_list -> expr_list , arithmetic_expression .)
    ]               reduce using rule 44 (expr_list -> expr_list , arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 111

    (61) arithmetic_expression -> arithmetic_expression + arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    +               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    -               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ;               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ,               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ]               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    >               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    GE              reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    <               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    LE              reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    EQ              reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    NE              reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    )               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    :               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    IF              reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    WHILE           reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    FOR             reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    PRINT           reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    BREAK           reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    CONTINUE        reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    RETURN          reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    {               reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ID              reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    *               shift and go to state 75
    /               shift and go to state 76

  ! *               [ reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .) ]
  ! /               [ reduce using rule 61 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .) ]
  ! +               [ shift and go to state 73 ]
  ! -               [ shift and go to state 74 ]


state 112

    (62) arithmetic_expression -> arithmetic_expression - arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    +               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    -               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ;               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ,               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ]               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    >               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    GE              reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    <               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    LE              reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    EQ              reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    NE              reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    )               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    :               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    IF              reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    WHILE           reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    FOR             reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    PRINT           reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    BREAK           reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    CONTINUE        reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    RETURN          reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    {               reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ID              reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    *               shift and go to state 75
    /               shift and go to state 76

  ! *               [ reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .) ]
  ! /               [ reduce using rule 62 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .) ]
  ! +               [ shift and go to state 73 ]
  ! -               [ shift and go to state 74 ]


state 113

    (63) arithmetic_expression -> arithmetic_expression * arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    +               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    -               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    *               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    /               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ;               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ,               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ]               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    >               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    GE              reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    <               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    LE              reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    EQ              reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    NE              reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    )               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    :               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    IF              reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    WHILE           reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    FOR             reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    PRINT           reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    BREAK           reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    CONTINUE        reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    RETURN          reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    {               reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ID              reduce using rule 63 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)

  ! +               [ shift and go to state 73 ]
  ! -               [ shift and go to state 74 ]
  ! *               [ shift and go to state 75 ]
  ! /               [ shift and go to state 76 ]


state 114

    (64) arithmetic_expression -> arithmetic_expression / arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    +               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    -               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    *               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    /               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ;               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ,               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ]               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    >               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    GE              reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    <               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    LE              reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    EQ              reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    NE              reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    )               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    :               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    IF              reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    WHILE           reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    FOR             reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    PRINT           reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    BREAK           reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    CONTINUE        reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    RETURN          reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    {               reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ID              reduce using rule 64 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)

  ! +               [ shift and go to state 73 ]
  ! -               [ shift and go to state 74 ]
  ! *               [ shift and go to state 75 ]
  ! /               [ shift and go to state 76 ]


state 115

    (75) matrix_operation -> matrix DOTADD matrix .
    (41) matrix_transposed -> matrix . '

    +               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    -               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    *               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    /               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    ;               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    ,               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    ]               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    >               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    GE              reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    <               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    LE              reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    EQ              reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    NE              reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    )               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    :               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    IF              reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    WHILE           reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    FOR             reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    PRINT           reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    BREAK           reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    CONTINUE        reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    RETURN          reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    {               reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    ID              reduce using rule 75 (matrix_operation -> matrix DOTADD matrix .)
    '               shift and go to state 81


state 116

    (76) matrix_operation -> matrix DOTSUB matrix .
    (41) matrix_transposed -> matrix . '

    +               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    -               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    *               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    /               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    ;               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    ,               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    ]               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    >               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    GE              reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    <               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    LE              reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    EQ              reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    NE              reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    )               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    :               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    IF              reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    WHILE           reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    FOR             reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    PRINT           reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    BREAK           reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    CONTINUE        reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    RETURN          reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    {               reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    ID              reduce using rule 76 (matrix_operation -> matrix DOTSUB matrix .)
    '               shift and go to state 81


state 117

    (77) matrix_operation -> matrix DOTMUL matrix .
    (41) matrix_transposed -> matrix . '

    +               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    -               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    *               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    /               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    ;               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    ,               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    ]               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    >               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    GE              reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    <               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    LE              reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    EQ              reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    NE              reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    )               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    :               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    IF              reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    WHILE           reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    FOR             reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    PRINT           reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    BREAK           reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    CONTINUE        reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    RETURN          reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    {               reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    ID              reduce using rule 77 (matrix_operation -> matrix DOTMUL matrix .)
    '               shift and go to state 81


state 118

    (78) matrix_operation -> matrix DOTDIV matrix .
    (41) matrix_transposed -> matrix . '

    +               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    -               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    *               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    /               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    ;               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    ,               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    ]               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    >               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    GE              reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    <               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    LE              reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    EQ              reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    NE              reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    )               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    :               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    IF              reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    WHILE           reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    FOR             reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    PRINT           reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    BREAK           reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    CONTINUE        reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    RETURN          reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    {               reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    ID              reduce using rule 78 (matrix_operation -> matrix DOTDIV matrix .)
    '               shift and go to state 81


state 119

    (65) arithmetic_expression -> ( arithmetic_expression ) .

    +               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    -               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    *               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    /               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    ;               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    ,               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    ]               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    >               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    GE              reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    <               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    LE              reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    EQ              reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    NE              reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    )               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    :               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    IF              reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    WHILE           reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    FOR             reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    PRINT           reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    BREAK           reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    CONTINUE        reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    RETURN          reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    {               reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)
    ID              reduce using rule 65 (arithmetic_expression -> ( arithmetic_expression ) .)


state 120

    (66) vector -> [ vector_row ] .

    +               reduce using rule 66 (vector -> [ vector_row ] .)
    -               reduce using rule 66 (vector -> [ vector_row ] .)
    *               reduce using rule 66 (vector -> [ vector_row ] .)
    /               reduce using rule 66 (vector -> [ vector_row ] .)
    ;               reduce using rule 66 (vector -> [ vector_row ] .)
    ,               reduce using rule 66 (vector -> [ vector_row ] .)
    ]               reduce using rule 66 (vector -> [ vector_row ] .)
    >               reduce using rule 66 (vector -> [ vector_row ] .)
    GE              reduce using rule 66 (vector -> [ vector_row ] .)
    <               reduce using rule 66 (vector -> [ vector_row ] .)
    LE              reduce using rule 66 (vector -> [ vector_row ] .)
    EQ              reduce using rule 66 (vector -> [ vector_row ] .)
    NE              reduce using rule 66 (vector -> [ vector_row ] .)
    )               reduce using rule 66 (vector -> [ vector_row ] .)
    :               reduce using rule 66 (vector -> [ vector_row ] .)
    IF              reduce using rule 66 (vector -> [ vector_row ] .)
    WHILE           reduce using rule 66 (vector -> [ vector_row ] .)
    FOR             reduce using rule 66 (vector -> [ vector_row ] .)
    PRINT           reduce using rule 66 (vector -> [ vector_row ] .)
    BREAK           reduce using rule 66 (vector -> [ vector_row ] .)
    CONTINUE        reduce using rule 66 (vector -> [ vector_row ] .)
    RETURN          reduce using rule 66 (vector -> [ vector_row ] .)
    {               reduce using rule 66 (vector -> [ vector_row ] .)
    ID              reduce using rule 66 (vector -> [ vector_row ] .)


state 121

    (67) vector_row -> vector_row ; . expr_list
    (44) expr_list -> . expr_list , arithmetic_expression
    (45) expr_list -> . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    expr_list                      shift and go to state 138
    arithmetic_expression          shift and go to state 38
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 122

    (69) matrix_function -> ZEROS ( const . , const )
    (72) matrix_function -> ZEROS ( const . )

    ,               shift and go to state 139
    )               shift and go to state 140


state 123

    (70) matrix_function -> ONES ( const . , const )
    (73) matrix_function -> ONES ( const . )

    ,               shift and go to state 141
    )               shift and go to state 142


state 124

    (71) matrix_function -> EYE ( const . , const )
    (74) matrix_function -> EYE ( const . )

    ,               shift and go to state 143
    )               shift and go to state 144


state 125

    (52) relational_expression -> ( relational_expression ) .

    )               reduce using rule 52 (relational_expression -> ( relational_expression ) .)


state 126

    (20) if_else_statement -> IF ( relational_expression ) statement .
    (21) if_else_statement -> IF ( relational_expression ) statement . ELSE statement

    IF              reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    WHILE           reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    FOR             reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    PRINT           reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    BREAK           reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    CONTINUE        reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    RETURN          reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    {               reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    ID              reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    $end            reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    }               reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .)
    ELSE            shift and go to state 145

  ! ELSE            [ reduce using rule 20 (if_else_statement -> IF ( relational_expression ) statement .) ]


state 127

    (22) if_else_statement -> IF ( error ) statement .
    (23) if_else_statement -> IF ( error ) statement . ELSE statement

    IF              reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    WHILE           reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    FOR             reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    PRINT           reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    BREAK           reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    CONTINUE        reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    RETURN          reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    {               reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    ID              reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    $end            reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    }               reduce using rule 22 (if_else_statement -> IF ( error ) statement .)
    ELSE            shift and go to state 146

  ! ELSE            [ reduce using rule 22 (if_else_statement -> IF ( error ) statement .) ]


state 128

    (46) relational_expression -> arithmetic_expression > arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    )               reduce using rule 46 (relational_expression -> arithmetic_expression > arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 129

    (47) relational_expression -> arithmetic_expression GE arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    )               reduce using rule 47 (relational_expression -> arithmetic_expression GE arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 130

    (48) relational_expression -> arithmetic_expression < arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    )               reduce using rule 48 (relational_expression -> arithmetic_expression < arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 131

    (49) relational_expression -> arithmetic_expression LE arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    )               reduce using rule 49 (relational_expression -> arithmetic_expression LE arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 132

    (50) relational_expression -> arithmetic_expression EQ arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    )               reduce using rule 50 (relational_expression -> arithmetic_expression EQ arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 133

    (51) relational_expression -> arithmetic_expression NE arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    )               reduce using rule 51 (relational_expression -> arithmetic_expression NE arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 134

    (24) while_statement -> WHILE ( relational_expression ) statement .

    IF              reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    WHILE           reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    FOR             reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    PRINT           reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    BREAK           reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    CONTINUE        reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    RETURN          reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    {               reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    ID              reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    $end            reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    }               reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)
    ELSE            reduce using rule 24 (while_statement -> WHILE ( relational_expression ) statement .)


state 135

    (25) while_statement -> WHILE ( error ) statement .

    IF              reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    WHILE           reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    FOR             reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    PRINT           reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    BREAK           reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    CONTINUE        reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    RETURN          reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    {               reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    ID              reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    $end            reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    }               reduce using rule 25 (while_statement -> WHILE ( error ) statement .)
    ELSE            reduce using rule 25 (while_statement -> WHILE ( error ) statement .)


state 136

    (26) for_statement -> FOR variable = range_expression statement .

    IF              reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    WHILE           reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    FOR             reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    PRINT           reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    BREAK           reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    CONTINUE        reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    RETURN          reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    {               reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    ID              reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    $end            reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    }               reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)
    ELSE            reduce using rule 26 (for_statement -> FOR variable = range_expression statement .)


state 137

    (27) range_expression -> arithmetic_expression : . arithmetic_expression
    (54) arithmetic_expression -> . const
    (55) arithmetic_expression -> . vector
    (56) arithmetic_expression -> . variable
    (57) arithmetic_expression -> . matrix
    (58) arithmetic_expression -> . minus_matrix
    (59) arithmetic_expression -> . matrix_function
    (60) arithmetic_expression -> . matrix_operation
    (61) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (64) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (65) arithmetic_expression -> . ( arithmetic_expression )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM
    (66) vector -> . [ vector_row ]
    (42) variable -> . ID
    (37) matrix -> . variable
    (38) matrix -> . minus_matrix
    (39) matrix -> . matrix_transposed
    (40) minus_matrix -> . - matrix
    (69) matrix_function -> . ZEROS ( const , const )
    (70) matrix_function -> . ONES ( const , const )
    (71) matrix_function -> . EYE ( const , const )
    (72) matrix_function -> . ZEROS ( const )
    (73) matrix_function -> . ONES ( const )
    (74) matrix_function -> . EYE ( const )
    (75) matrix_operation -> . matrix DOTADD matrix
    (76) matrix_operation -> . matrix DOTSUB matrix
    (77) matrix_operation -> . matrix DOTMUL matrix
    (78) matrix_operation -> . matrix DOTDIV matrix
    (41) matrix_transposed -> . matrix '

    (               shift and go to state 47
    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50
    [               shift and go to state 51
    ID              shift and go to state 23
    -               shift and go to state 46
    ZEROS           shift and go to state 53
    ONES            shift and go to state 54
    EYE             shift and go to state 55

    arithmetic_expression          shift and go to state 147
    const                          shift and go to state 39
    vector                         shift and go to state 40
    variable                       shift and go to state 41
    matrix                         shift and go to state 42
    minus_matrix                   shift and go to state 43
    matrix_function                shift and go to state 44
    matrix_operation               shift and go to state 45
    matrix_transposed              shift and go to state 52

state 138

    (67) vector_row -> vector_row ; expr_list .
    (44) expr_list -> expr_list . , arithmetic_expression

    ]               reduce using rule 67 (vector_row -> vector_row ; expr_list .)
    ;               reduce using rule 67 (vector_row -> vector_row ; expr_list .)
    ,               shift and go to state 71


state 139

    (69) matrix_function -> ZEROS ( const , . const )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM

    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50

    const                          shift and go to state 148

state 140

    (72) matrix_function -> ZEROS ( const ) .

    +               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    -               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    *               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    /               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    ;               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    ,               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    ]               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    >               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    GE              reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    <               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    LE              reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    EQ              reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    NE              reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    )               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    :               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    IF              reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    WHILE           reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    FOR             reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    PRINT           reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    BREAK           reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    CONTINUE        reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    RETURN          reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    {               reduce using rule 72 (matrix_function -> ZEROS ( const ) .)
    ID              reduce using rule 72 (matrix_function -> ZEROS ( const ) .)


state 141

    (70) matrix_function -> ONES ( const , . const )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM

    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50

    const                          shift and go to state 149

state 142

    (73) matrix_function -> ONES ( const ) .

    +               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    -               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    *               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    /               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    ;               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    ,               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    ]               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    >               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    GE              reduce using rule 73 (matrix_function -> ONES ( const ) .)
    <               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    LE              reduce using rule 73 (matrix_function -> ONES ( const ) .)
    EQ              reduce using rule 73 (matrix_function -> ONES ( const ) .)
    NE              reduce using rule 73 (matrix_function -> ONES ( const ) .)
    )               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    :               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    IF              reduce using rule 73 (matrix_function -> ONES ( const ) .)
    WHILE           reduce using rule 73 (matrix_function -> ONES ( const ) .)
    FOR             reduce using rule 73 (matrix_function -> ONES ( const ) .)
    PRINT           reduce using rule 73 (matrix_function -> ONES ( const ) .)
    BREAK           reduce using rule 73 (matrix_function -> ONES ( const ) .)
    CONTINUE        reduce using rule 73 (matrix_function -> ONES ( const ) .)
    RETURN          reduce using rule 73 (matrix_function -> ONES ( const ) .)
    {               reduce using rule 73 (matrix_function -> ONES ( const ) .)
    ID              reduce using rule 73 (matrix_function -> ONES ( const ) .)


state 143

    (71) matrix_function -> EYE ( const , . const )
    (34) const -> . STRING
    (35) const -> . FLOATNUM
    (36) const -> . INTNUM

    STRING          shift and go to state 48
    FLOATNUM        shift and go to state 49
    INTNUM          shift and go to state 50

    const                          shift and go to state 150

state 144

    (74) matrix_function -> EYE ( const ) .

    +               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    -               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    *               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    /               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    ;               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    ,               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    ]               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    >               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    GE              reduce using rule 74 (matrix_function -> EYE ( const ) .)
    <               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    LE              reduce using rule 74 (matrix_function -> EYE ( const ) .)
    EQ              reduce using rule 74 (matrix_function -> EYE ( const ) .)
    NE              reduce using rule 74 (matrix_function -> EYE ( const ) .)
    )               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    :               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    IF              reduce using rule 74 (matrix_function -> EYE ( const ) .)
    WHILE           reduce using rule 74 (matrix_function -> EYE ( const ) .)
    FOR             reduce using rule 74 (matrix_function -> EYE ( const ) .)
    PRINT           reduce using rule 74 (matrix_function -> EYE ( const ) .)
    BREAK           reduce using rule 74 (matrix_function -> EYE ( const ) .)
    CONTINUE        reduce using rule 74 (matrix_function -> EYE ( const ) .)
    RETURN          reduce using rule 74 (matrix_function -> EYE ( const ) .)
    {               reduce using rule 74 (matrix_function -> EYE ( const ) .)
    ID              reduce using rule 74 (matrix_function -> EYE ( const ) .)


state 145

    (21) if_else_statement -> IF ( relational_expression ) statement ELSE . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 151
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 146

    (23) if_else_statement -> IF ( error ) statement ELSE . statement
    (4) statement -> . assignment
    (5) statement -> . if_else_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) statement -> . break_statement
    (10) statement -> . continue_statement
    (11) statement -> . return_statement
    (12) statement -> . curly_brackets_statement
    (13) assignment -> . variable assignment_op arithmetic_expression ;
    (14) assignment -> . ref_var assignment_op arithmetic_expression ;
    (20) if_else_statement -> . IF ( relational_expression ) statement
    (21) if_else_statement -> . IF ( relational_expression ) statement ELSE statement
    (22) if_else_statement -> . IF ( error ) statement
    (23) if_else_statement -> . IF ( error ) statement ELSE statement
    (24) while_statement -> . WHILE ( relational_expression ) statement
    (25) while_statement -> . WHILE ( error ) statement
    (26) for_statement -> . FOR variable = range_expression statement
    (28) print_statement -> . PRINT expr_list ;
    (29) print_statement -> . PRINT error ;
    (30) break_statement -> . BREAK ;
    (32) continue_statement -> . CONTINUE ;
    (31) return_statement -> . RETURN arithmetic_expression ;
    (33) curly_brackets_statement -> . { statements }
    (42) variable -> . ID
    (43) ref_var -> . variable [ expr_list ]

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    statement                      shift and go to state 152
    assignment                     shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    break_statement                shift and go to state 9
    continue_statement             shift and go to state 10
    return_statement               shift and go to state 11
    curly_brackets_statement       shift and go to state 12
    variable                       shift and go to state 13
    ref_var                        shift and go to state 14

state 147

    (27) range_expression -> arithmetic_expression : arithmetic_expression .
    (61) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (64) arithmetic_expression -> arithmetic_expression . / arithmetic_expression

    IF              reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    WHILE           reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    FOR             reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    PRINT           reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    BREAK           reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    CONTINUE        reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    RETURN          reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    {               reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    ID              reduce using rule 27 (range_expression -> arithmetic_expression : arithmetic_expression .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76


state 148

    (69) matrix_function -> ZEROS ( const , const . )

    )               shift and go to state 153


state 149

    (70) matrix_function -> ONES ( const , const . )

    )               shift and go to state 154


state 150

    (71) matrix_function -> EYE ( const , const . )

    )               shift and go to state 155


state 151

    (21) if_else_statement -> IF ( relational_expression ) statement ELSE statement .

    IF              reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    WHILE           reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    FOR             reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    PRINT           reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    BREAK           reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    RETURN          reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    {               reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    ID              reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    $end            reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    }               reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)
    ELSE            reduce using rule 21 (if_else_statement -> IF ( relational_expression ) statement ELSE statement .)


state 152

    (23) if_else_statement -> IF ( error ) statement ELSE statement .

    IF              reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    WHILE           reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    FOR             reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    PRINT           reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    BREAK           reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    CONTINUE        reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    RETURN          reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    {               reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    ID              reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    $end            reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    }               reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)
    ELSE            reduce using rule 23 (if_else_statement -> IF ( error ) statement ELSE statement .)


state 153

    (69) matrix_function -> ZEROS ( const , const ) .

    +               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    -               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    *               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    /               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    ;               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    ,               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    ]               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    >               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    GE              reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    <               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    LE              reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    EQ              reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    NE              reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    )               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    :               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    IF              reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    WHILE           reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    FOR             reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    PRINT           reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    BREAK           reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    CONTINUE        reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    RETURN          reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    {               reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)
    ID              reduce using rule 69 (matrix_function -> ZEROS ( const , const ) .)


state 154

    (70) matrix_function -> ONES ( const , const ) .

    +               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    -               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    *               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    /               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    ;               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    ,               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    ]               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    >               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    GE              reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    <               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    LE              reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    EQ              reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    NE              reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    )               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    :               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    IF              reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    WHILE           reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    FOR             reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    PRINT           reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    BREAK           reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    CONTINUE        reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    RETURN          reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    {               reduce using rule 70 (matrix_function -> ONES ( const , const ) .)
    ID              reduce using rule 70 (matrix_function -> ONES ( const , const ) .)


state 155

    (71) matrix_function -> EYE ( const , const ) .

    +               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    -               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    *               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    /               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    ;               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    ,               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    ]               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    >               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    GE              reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    <               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    LE              reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    EQ              reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    NE              reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    )               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    :               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    IF              reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    WHILE           reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    FOR             reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    PRINT           reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    BREAK           reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    CONTINUE        reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    RETURN          reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    {               reduce using rule 71 (matrix_function -> EYE ( const , const ) .)
    ID              reduce using rule 71 (matrix_function -> EYE ( const , const ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 97 resolved as shift
WARNING: reduce/reduce conflict in state 41 resolved using rule (matrix -> variable)
WARNING: rejected rule (arithmetic_expression -> variable) in state 41
WARNING: reduce/reduce conflict in state 43 resolved using rule (matrix -> minus_matrix)
WARNING: rejected rule (arithmetic_expression -> minus_matrix) in state 43
WARNING: Rule (arithmetic_expression -> variable) is never reduced
WARNING: Rule (arithmetic_expression -> minus_matrix) is never reduced
