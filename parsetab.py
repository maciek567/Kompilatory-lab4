
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassoc>GE<LEEQNEnonassocADDASSIGNSUBASSIGNDIVASSIGNMULASSIGNright=left+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVleft\'ADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE GT ID IF INTNUM LE LT MULASSIGN NE ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE UNARY_MINUS WHILE ZEROSprogram : statementsstatements : statements statement\n                    | statementstatement : assignment\n            | if_else_statement\n            | while_statement\n            | for_statement\n            | print_statement\n            | break_statement\n            | continue_statement\n            | return_statement\n            | curly_brackets_statement\n            assignment : variable assignment_op arithmetic_expression \';\'\n                    | ref_var assignment_op arithmetic_expression \';\' assignment_op : \'=\'\n                    | ADDASSIGN\n                    | SUBASSIGN\n                    | MULASSIGN\n                    | DIVASSIGN\n                    if_else_statement : IF \'(\' relational_expression \')\'  statement  %prec IFX\n                        | IF \'(\' relational_expression \')\' statement  ELSE  statement\n                        | IF \'(\' error \')\' statement %prec IFX\n                        | IF \'(\' error \')\' statement ELSE statement while_statement : WHILE \'(\' relational_expression \')\' statement\n                        | WHILE \'(\' error \')\' statementfor_statement : FOR variable \'=\'  range_expression statement range_expression : arithmetic_expression \':\' arithmetic_expression print_statement : PRINT expr_list \';\'\n                        | PRINT error \';\' break_statement : BREAK \';\'return_statement : RETURN arithmetic_expression \';\'continue_statement : CONTINUE \';\'  curly_brackets_statement : \'{\' statements \'}\' const : STRING\n            | FLOATNUM\n            | INTNUM  matrix : variable\n                | minus_matrix\n                | matrix_transposed  minus_matrix : \'-\' matrix matrix_transposed : matrix "\'" variable : ID ref_var : variable \'[\' expr_list \']\' expr_list : expr_list \',\' arithmetic_expression\n                     | arithmetic_expression  relational_expression : arithmetic_expression \'>\' arithmetic_expression\n                 | arithmetic_expression GE arithmetic_expression\n                 | arithmetic_expression \'<\' arithmetic_expression\n                 | arithmetic_expression LE arithmetic_expression\n                 | arithmetic_expression EQ arithmetic_expression\n                 | arithmetic_expression NE arithmetic_expression\n                 | \'(\' relational_expression \')\'\n                 | arithmetic_expressionarithmetic_expression : const\n                        | vector\n                        | variable\n                        | matrix\n                        | minus_matrix\n                        | matrix_function\n                        | matrix_operation\n                        | arithmetic_expression \'+\' arithmetic_expression\n                       | arithmetic_expression \'-\' arithmetic_expression\n                       | arithmetic_expression \'*\' arithmetic_expression\n                       | arithmetic_expression \'/\' arithmetic_expression\n                       | \'(\' arithmetic_expression \')\'\n                        vector : \'[\' vector_row \']\'  vector_row : vector_row \';\' expr_list\n                    | expr_list  matrix_function : ZEROS \'(\' const \',\' const \')\'\n                        | ONES \'(\' const \',\' const \')\'\n                        | EYE \'(\' const \',\' const \')\'\n                        | ZEROS \'(\' const \')\'\n                        | ONES \'(\' const \')\'\n                        | EYE \'(\' const \')\'\n                         matrix_operation : matrix DOTADD matrix\n                           | matrix DOTSUB matrix\n                           | matrix DOTMUL matrix\n                           | matrix DOTDIV matrix '
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,15,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,15,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,15,15,15,15,15,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,15,15,-27,-21,-23,-69,-70,-71,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,16,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,16,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,16,16,16,16,16,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,16,16,-27,-21,-23,-69,-70,-71,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,17,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,17,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,17,17,17,17,17,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,17,17,-27,-21,-23,-69,-70,-71,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,18,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,18,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,18,18,18,18,18,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,18,18,-27,-21,-23,-69,-70,-71,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,19,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,19,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,19,19,19,19,19,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,19,19,-27,-21,-23,-69,-70,-71,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,20,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,20,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,20,20,20,20,20,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,20,20,-27,-21,-23,-69,-70,-71,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,21,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,21,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,21,21,21,21,21,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,21,21,-27,-21,-23,-69,-70,-71,]),'{':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,39,40,41,42,43,44,45,48,49,50,52,56,57,59,70,72,81,82,83,84,91,92,93,95,98,99,106,107,108,111,112,113,114,115,116,117,118,119,120,126,127,134,135,136,140,142,144,145,146,147,151,152,153,154,155,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,-42,-2,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-30,-32,22,-28,-29,-41,-40,-37,-38,-31,-33,-13,-14,22,22,22,22,22,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-20,-22,-24,-25,-26,-72,-73,-74,22,22,-27,-21,-23,-69,-70,-71,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,57,59,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,92,93,95,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,121,126,127,134,135,136,137,140,142,144,145,146,147,151,152,153,154,155,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,23,23,23,23,-42,-2,23,23,-15,-16,-17,-18,-19,23,23,23,-54,-55,-37,-57,-38,-59,-60,23,23,-34,-35,-36,23,-39,-30,-32,23,23,23,-28,23,-29,23,23,23,23,23,23,23,23,-41,-40,-37,-38,-31,-33,-13,-14,23,23,23,23,23,23,23,23,23,23,23,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,23,-20,-22,-24,-25,-26,23,-72,-73,-74,23,23,-27,-21,-23,-69,-70,-71,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,24,56,57,70,72,91,92,93,95,126,127,134,135,136,151,152,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-30,-32,-28,-29,-31,-33,-13,-14,-20,-22,-24,-25,-26,-21,-23,]),'}':([3,4,5,6,7,8,9,10,11,12,24,56,57,59,70,72,91,92,93,95,126,127,134,135,136,151,152,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-30,-32,92,-28,-29,-31,-33,-13,-14,-20,-22,-24,-25,-26,-21,-23,]),'ELSE':([4,5,6,7,8,9,10,11,12,56,57,70,72,91,92,93,95,126,127,134,135,136,151,152,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-30,-32,-28,-29,-31,-33,-13,-14,145,146,-24,-25,-26,-21,-23,]),'[':([13,18,21,23,25,26,27,28,29,30,31,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[26,51,51,-42,51,51,-15,-16,-17,-18,-19,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'=':([13,14,23,35,94,],[27,27,-42,69,-43,]),'ADDASSIGN':([13,14,23,94,],[28,28,-42,-43,]),'SUBASSIGN':([13,14,23,94,],[29,29,-42,-43,]),'MULASSIGN':([13,14,23,94,],[30,30,-42,-43,]),'DIVASSIGN':([13,14,23,94,],[31,31,-42,-43,]),'(':([15,16,18,21,25,26,27,28,29,30,31,32,33,34,47,51,53,54,55,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[33,34,47,47,47,47,-15,-16,-17,-18,-19,47,63,63,47,47,88,89,90,63,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'error':([18,33,34,],[37,65,68,]),'STRING':([18,21,25,26,27,28,29,30,31,32,33,34,47,51,63,69,71,73,74,75,76,88,89,90,100,101,102,103,104,105,121,137,139,141,143,],[48,48,48,48,-15,-16,-17,-18,-19,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FLOATNUM':([18,21,25,26,27,28,29,30,31,32,33,34,47,51,63,69,71,73,74,75,76,88,89,90,100,101,102,103,104,105,121,137,139,141,143,],[49,49,49,49,-15,-16,-17,-18,-19,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'INTNUM':([18,21,25,26,27,28,29,30,31,32,33,34,47,51,63,69,71,73,74,75,76,88,89,90,100,101,102,103,104,105,121,137,139,141,143,],[50,50,50,50,-15,-16,-17,-18,-19,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'-':([18,21,23,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,58,60,62,63,66,69,71,73,74,75,76,77,78,79,80,81,82,83,84,85,97,100,101,102,103,104,105,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,132,133,137,140,142,144,147,153,154,155,],[46,46,-42,46,46,-15,-16,-17,-18,-19,46,46,46,74,-54,-55,-37,-57,-38,-59,-60,46,46,-34,-35,-36,46,-39,74,74,74,46,74,46,46,46,46,46,46,46,46,46,46,-41,-40,-37,-38,74,74,46,46,46,46,46,46,74,74,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,46,74,74,74,74,74,74,46,-72,-73,-74,74,-69,-70,-71,]),'ZEROS':([18,21,25,26,27,28,29,30,31,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[53,53,53,53,-15,-16,-17,-18,-19,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'ONES':([18,21,25,26,27,28,29,30,31,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[54,54,54,54,-15,-16,-17,-18,-19,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'EYE':([18,21,25,26,27,28,29,30,31,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[55,55,55,55,-15,-16,-17,-18,-19,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),';':([19,20,23,36,37,38,39,40,41,42,43,44,45,48,49,50,52,58,60,62,81,82,83,84,86,87,110,111,112,113,114,115,116,117,118,119,120,138,140,142,144,153,154,155,],[56,57,-42,70,72,-45,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,91,93,95,-41,-40,-37,-38,121,-68,-44,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-67,-72,-73,-74,-69,-70,-71,]),'+':([23,38,39,40,41,42,43,44,45,48,49,50,52,58,60,62,66,81,82,83,84,85,97,109,110,111,112,113,114,115,116,117,118,119,120,128,129,130,131,132,133,140,142,144,147,153,154,155,],[-42,73,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,73,73,73,73,-41,-40,-37,-38,73,73,73,73,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,73,73,73,73,73,73,-72,-73,-74,73,-69,-70,-71,]),'*':([23,38,39,40,41,42,43,44,45,48,49,50,52,58,60,62,66,81,82,83,84,85,97,109,110,111,112,113,114,115,116,117,118,119,120,128,129,130,131,132,133,140,142,144,147,153,154,155,],[-42,75,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,75,75,75,75,-41,-40,-37,-38,75,75,75,75,75,75,-63,-64,-75,-76,-77,-78,-65,-66,75,75,75,75,75,75,-72,-73,-74,75,-69,-70,-71,]),'/':([23,38,39,40,41,42,43,44,45,48,49,50,52,58,60,62,66,81,82,83,84,85,97,109,110,111,112,113,114,115,116,117,118,119,120,128,129,130,131,132,133,140,142,144,147,153,154,155,],[-42,76,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,76,76,76,76,-41,-40,-37,-38,76,76,76,76,76,76,-63,-64,-75,-76,-77,-78,-65,-66,76,76,76,76,76,76,-72,-73,-74,76,-69,-70,-71,]),',':([23,36,38,39,40,41,42,43,44,45,48,49,50,52,61,81,82,83,84,87,110,111,112,113,114,115,116,117,118,119,120,122,123,124,138,140,142,144,153,154,155,],[-42,71,-45,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,71,-41,-40,-37,-38,71,-44,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,139,141,143,71,-72,-73,-74,-69,-70,-71,]),'DOTADD':([23,41,42,43,52,81,82,83,84,],[-42,-37,77,-38,-39,-41,-40,-37,-38,]),'DOTSUB':([23,41,42,43,52,81,82,83,84,],[-42,-37,78,-38,-39,-41,-40,-37,-38,]),'DOTMUL':([23,41,42,43,52,81,82,83,84,],[-42,-37,79,-38,-39,-41,-40,-37,-38,]),'DOTDIV':([23,41,42,43,52,81,82,83,84,],[-42,-37,80,-38,-39,-41,-40,-37,-38,]),"'":([23,41,42,43,52,81,82,83,84,115,116,117,118,],[-42,-37,81,-38,-39,-41,81,-37,-38,81,81,81,81,]),']':([23,38,39,40,41,42,43,44,45,48,49,50,52,61,81,82,83,84,86,87,110,111,112,113,114,115,116,117,118,119,120,138,140,142,144,153,154,155,],[-42,-45,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,94,-41,-40,-37,-38,120,-68,-44,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-67,-72,-73,-74,-69,-70,-71,]),'>':([23,39,40,41,42,43,44,45,48,49,50,52,66,81,82,83,84,97,111,112,113,114,115,116,117,118,119,120,140,142,144,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,100,-41,-40,-37,-38,100,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-72,-73,-74,-69,-70,-71,]),'GE':([23,39,40,41,42,43,44,45,48,49,50,52,66,81,82,83,84,97,111,112,113,114,115,116,117,118,119,120,140,142,144,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,101,-41,-40,-37,-38,101,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-72,-73,-74,-69,-70,-71,]),'<':([23,39,40,41,42,43,44,45,48,49,50,52,66,81,82,83,84,97,111,112,113,114,115,116,117,118,119,120,140,142,144,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,102,-41,-40,-37,-38,102,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-72,-73,-74,-69,-70,-71,]),'LE':([23,39,40,41,42,43,44,45,48,49,50,52,66,81,82,83,84,97,111,112,113,114,115,116,117,118,119,120,140,142,144,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,103,-41,-40,-37,-38,103,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-72,-73,-74,-69,-70,-71,]),'EQ':([23,39,40,41,42,43,44,45,48,49,50,52,66,81,82,83,84,97,111,112,113,114,115,116,117,118,119,120,140,142,144,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,104,-41,-40,-37,-38,104,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-72,-73,-74,-69,-70,-71,]),'NE':([23,39,40,41,42,43,44,45,48,49,50,52,66,81,82,83,84,97,111,112,113,114,115,116,117,118,119,120,140,142,144,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,105,-41,-40,-37,-38,105,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-72,-73,-74,-69,-70,-71,]),')':([23,39,40,41,42,43,44,45,48,49,50,52,64,65,66,67,68,81,82,83,84,85,96,97,111,112,113,114,115,116,117,118,119,120,122,123,124,125,128,129,130,131,132,133,140,142,144,148,149,150,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,98,99,-53,106,107,-41,-40,-37,-38,119,125,119,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,140,142,144,-52,-46,-47,-48,-49,-50,-51,-72,-73,-74,153,154,155,-69,-70,-71,]),':':([23,39,40,41,42,43,44,45,48,49,50,52,81,82,83,84,109,111,112,113,114,115,116,117,118,119,120,140,142,144,153,154,155,],[-42,-54,-55,-37,-57,-38,-59,-60,-34,-35,-36,-39,-41,-40,-37,-38,137,-61,-62,-63,-64,-75,-76,-77,-78,-65,-66,-72,-73,-74,-69,-70,-71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,22,],[2,59,]),'statement':([0,2,22,59,98,99,106,107,108,145,146,],[3,24,3,24,126,127,134,135,136,151,152,]),'assignment':([0,2,22,59,98,99,106,107,108,145,146,],[4,4,4,4,4,4,4,4,4,4,4,]),'if_else_statement':([0,2,22,59,98,99,106,107,108,145,146,],[5,5,5,5,5,5,5,5,5,5,5,]),'while_statement':([0,2,22,59,98,99,106,107,108,145,146,],[6,6,6,6,6,6,6,6,6,6,6,]),'for_statement':([0,2,22,59,98,99,106,107,108,145,146,],[7,7,7,7,7,7,7,7,7,7,7,]),'print_statement':([0,2,22,59,98,99,106,107,108,145,146,],[8,8,8,8,8,8,8,8,8,8,8,]),'break_statement':([0,2,22,59,98,99,106,107,108,145,146,],[9,9,9,9,9,9,9,9,9,9,9,]),'continue_statement':([0,2,22,59,98,99,106,107,108,145,146,],[10,10,10,10,10,10,10,10,10,10,10,]),'return_statement':([0,2,22,59,98,99,106,107,108,145,146,],[11,11,11,11,11,11,11,11,11,11,11,]),'curly_brackets_statement':([0,2,22,59,98,99,106,107,108,145,146,],[12,12,12,12,12,12,12,12,12,12,12,]),'variable':([0,2,17,18,21,22,25,26,32,33,34,46,47,51,59,63,69,71,73,74,75,76,77,78,79,80,98,99,100,101,102,103,104,105,106,107,108,121,137,145,146,],[13,13,35,41,41,13,41,41,41,41,41,83,41,41,13,41,41,41,41,41,41,41,83,83,83,83,13,13,41,41,41,41,41,41,13,13,13,41,41,13,13,]),'ref_var':([0,2,22,59,98,99,106,107,108,145,146,],[14,14,14,14,14,14,14,14,14,14,14,]),'assignment_op':([13,14,],[25,32,]),'expr_list':([18,26,51,121,],[36,61,87,138,]),'arithmetic_expression':([18,21,25,26,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[38,58,60,38,62,66,66,85,38,97,109,110,111,112,113,114,128,129,130,131,132,133,38,147,]),'const':([18,21,25,26,32,33,34,47,51,63,69,71,73,74,75,76,88,89,90,100,101,102,103,104,105,121,137,139,141,143,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,122,123,124,39,39,39,39,39,39,39,39,148,149,150,]),'vector':([18,21,25,26,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'matrix':([18,21,25,26,32,33,34,46,47,51,63,69,71,73,74,75,76,77,78,79,80,100,101,102,103,104,105,121,137,],[42,42,42,42,42,42,42,82,42,42,42,42,42,42,42,42,42,115,116,117,118,42,42,42,42,42,42,42,42,]),'minus_matrix':([18,21,25,26,32,33,34,46,47,51,63,69,71,73,74,75,76,77,78,79,80,100,101,102,103,104,105,121,137,],[43,43,43,43,43,43,43,84,43,43,43,43,43,43,43,43,43,84,84,84,84,43,43,43,43,43,43,43,43,]),'matrix_function':([18,21,25,26,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'matrix_operation':([18,21,25,26,32,33,34,47,51,63,69,71,73,74,75,76,100,101,102,103,104,105,121,137,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'matrix_transposed':([18,21,25,26,32,33,34,46,47,51,63,69,71,73,74,75,76,77,78,79,80,100,101,102,103,104,105,121,137,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'relational_expression':([33,34,63,],[64,67,96,]),'vector_row':([51,],[86,]),'range_expression':([69,],[108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','Mparser.py',34),
  ('statements -> statements statement','statements',2,'p_statements','Mparser.py',40),
  ('statements -> statement','statements',1,'p_statements','Mparser.py',41),
  ('statement -> assignment','statement',1,'p_statement','Mparser.py',50),
  ('statement -> if_else_statement','statement',1,'p_statement','Mparser.py',51),
  ('statement -> while_statement','statement',1,'p_statement','Mparser.py',52),
  ('statement -> for_statement','statement',1,'p_statement','Mparser.py',53),
  ('statement -> print_statement','statement',1,'p_statement','Mparser.py',54),
  ('statement -> break_statement','statement',1,'p_statement','Mparser.py',55),
  ('statement -> continue_statement','statement',1,'p_statement','Mparser.py',56),
  ('statement -> return_statement','statement',1,'p_statement','Mparser.py',57),
  ('statement -> curly_brackets_statement','statement',1,'p_statement','Mparser.py',58),
  ('assignment -> variable assignment_op arithmetic_expression ;','assignment',4,'p_assignment','Mparser.py',64),
  ('assignment -> ref_var assignment_op arithmetic_expression ;','assignment',4,'p_assignment','Mparser.py',65),
  ('assignment_op -> =','assignment_op',1,'p_assignment_op','Mparser.py',70),
  ('assignment_op -> ADDASSIGN','assignment_op',1,'p_assignment_op','Mparser.py',71),
  ('assignment_op -> SUBASSIGN','assignment_op',1,'p_assignment_op','Mparser.py',72),
  ('assignment_op -> MULASSIGN','assignment_op',1,'p_assignment_op','Mparser.py',73),
  ('assignment_op -> DIVASSIGN','assignment_op',1,'p_assignment_op','Mparser.py',74),
  ('if_else_statement -> IF ( relational_expression ) statement','if_else_statement',5,'p_if_else_statement','Mparser.py',80),
  ('if_else_statement -> IF ( relational_expression ) statement ELSE statement','if_else_statement',7,'p_if_else_statement','Mparser.py',81),
  ('if_else_statement -> IF ( error ) statement','if_else_statement',5,'p_if_else_statement','Mparser.py',82),
  ('if_else_statement -> IF ( error ) statement ELSE statement','if_else_statement',7,'p_if_else_statement','Mparser.py',83),
  ('while_statement -> WHILE ( relational_expression ) statement','while_statement',5,'p_while_statement','Mparser.py',91),
  ('while_statement -> WHILE ( error ) statement','while_statement',5,'p_while_statement','Mparser.py',92),
  ('for_statement -> FOR variable = range_expression statement','for_statement',5,'p_for_statement','Mparser.py',98),
  ('range_expression -> arithmetic_expression : arithmetic_expression','range_expression',3,'p_range_expression','Mparser.py',103),
  ('print_statement -> PRINT expr_list ;','print_statement',3,'p_print_statement','Mparser.py',108),
  ('print_statement -> PRINT error ;','print_statement',3,'p_print_statement','Mparser.py',109),
  ('break_statement -> BREAK ;','break_statement',2,'p_break_statement','Mparser.py',115),
  ('return_statement -> RETURN arithmetic_expression ;','return_statement',3,'p_return_statement','Mparser.py',120),
  ('continue_statement -> CONTINUE ;','continue_statement',2,'p_continue_statement','Mparser.py',125),
  ('curly_brackets_statement -> { statements }','curly_brackets_statement',3,'p_curly_brackets_statement','Mparser.py',130),
  ('const -> STRING','const',1,'p_const','Mparser.py',135),
  ('const -> FLOATNUM','const',1,'p_const','Mparser.py',136),
  ('const -> INTNUM','const',1,'p_const','Mparser.py',137),
  ('matrix -> variable','matrix',1,'p_matrix','Mparser.py',142),
  ('matrix -> minus_matrix','matrix',1,'p_matrix','Mparser.py',143),
  ('matrix -> matrix_transposed','matrix',1,'p_matrix','Mparser.py',144),
  ('minus_matrix -> - matrix','minus_matrix',2,'p_minus_matrix','Mparser.py',149),
  ("matrix_transposed -> matrix '",'matrix_transposed',2,'p_matrix_transposed','Mparser.py',154),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',159),
  ('ref_var -> variable [ expr_list ]','ref_var',4,'p_ref_var','Mparser.py',164),
  ('expr_list -> expr_list , arithmetic_expression','expr_list',3,'p_expr_list','Mparser.py',169),
  ('expr_list -> arithmetic_expression','expr_list',1,'p_expr_list','Mparser.py',170),
  ('relational_expression -> arithmetic_expression > arithmetic_expression','relational_expression',3,'p_relational_expression','Mparser.py',180),
  ('relational_expression -> arithmetic_expression GE arithmetic_expression','relational_expression',3,'p_relational_expression','Mparser.py',181),
  ('relational_expression -> arithmetic_expression < arithmetic_expression','relational_expression',3,'p_relational_expression','Mparser.py',182),
  ('relational_expression -> arithmetic_expression LE arithmetic_expression','relational_expression',3,'p_relational_expression','Mparser.py',183),
  ('relational_expression -> arithmetic_expression EQ arithmetic_expression','relational_expression',3,'p_relational_expression','Mparser.py',184),
  ('relational_expression -> arithmetic_expression NE arithmetic_expression','relational_expression',3,'p_relational_expression','Mparser.py',185),
  ('relational_expression -> ( relational_expression )','relational_expression',3,'p_relational_expression','Mparser.py',186),
  ('relational_expression -> arithmetic_expression','relational_expression',1,'p_relational_expression','Mparser.py',187),
  ('arithmetic_expression -> const','arithmetic_expression',1,'p_arithmetic_expression','Mparser.py',198),
  ('arithmetic_expression -> vector','arithmetic_expression',1,'p_arithmetic_expression','Mparser.py',199),
  ('arithmetic_expression -> variable','arithmetic_expression',1,'p_arithmetic_expression','Mparser.py',200),
  ('arithmetic_expression -> matrix','arithmetic_expression',1,'p_arithmetic_expression','Mparser.py',201),
  ('arithmetic_expression -> minus_matrix','arithmetic_expression',1,'p_arithmetic_expression','Mparser.py',202),
  ('arithmetic_expression -> matrix_function','arithmetic_expression',1,'p_arithmetic_expression','Mparser.py',203),
  ('arithmetic_expression -> matrix_operation','arithmetic_expression',1,'p_arithmetic_expression','Mparser.py',204),
  ('arithmetic_expression -> arithmetic_expression + arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','Mparser.py',205),
  ('arithmetic_expression -> arithmetic_expression - arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','Mparser.py',206),
  ('arithmetic_expression -> arithmetic_expression * arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','Mparser.py',207),
  ('arithmetic_expression -> arithmetic_expression / arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','Mparser.py',208),
  ('arithmetic_expression -> ( arithmetic_expression )','arithmetic_expression',3,'p_arithmetic_expression','Mparser.py',209),
  ('vector -> [ vector_row ]','vector',3,'p_vector_more_dimensions','Mparser.py',220),
  ('vector_row -> vector_row ; expr_list','vector_row',3,'p_vector_row','Mparser.py',225),
  ('vector_row -> expr_list','vector_row',1,'p_vector_row','Mparser.py',226),
  ('matrix_function -> ZEROS ( const , const )','matrix_function',6,'p_matrix_function','Mparser.py',237),
  ('matrix_function -> ONES ( const , const )','matrix_function',6,'p_matrix_function','Mparser.py',238),
  ('matrix_function -> EYE ( const , const )','matrix_function',6,'p_matrix_function','Mparser.py',239),
  ('matrix_function -> ZEROS ( const )','matrix_function',4,'p_matrix_function','Mparser.py',240),
  ('matrix_function -> ONES ( const )','matrix_function',4,'p_matrix_function','Mparser.py',241),
  ('matrix_function -> EYE ( const )','matrix_function',4,'p_matrix_function','Mparser.py',242),
  ('matrix_operation -> matrix DOTADD matrix','matrix_operation',3,'p_matrix_operation','Mparser.py',250),
  ('matrix_operation -> matrix DOTSUB matrix','matrix_operation',3,'p_matrix_operation','Mparser.py',251),
  ('matrix_operation -> matrix DOTMUL matrix','matrix_operation',3,'p_matrix_operation','Mparser.py',252),
  ('matrix_operation -> matrix DOTDIV matrix','matrix_operation',3,'p_matrix_operation','Mparser.py',253),
]
